
FreeRTOS_Exercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007448  08007448  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014618  20000070  080074c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014688  080074c0  00024688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f64  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c2  00000000  00000000  00039047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119a  00000000  00000000  0003dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256e7  00000000  00000000  0003f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aef6  00000000  00000000  00064749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1c6e  00000000  00000000  0007f63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065b8  00000000  00000000  001612b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  00167868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072d0 	.word	0x080072d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080072d0 	.word	0x080072d0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f64 	.word	0x20012f64

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fb1d 	bl	8000be4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f853 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f8e9 	bl	8000784 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f8bd 	bl	8000730 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/*Enable Cycle counter feature of the process*/
	DWT_CTRL |= 1;
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <main+0x98>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <main+0x98>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]

	/*Configure sysview target source file and start recording*/
	SEGGER_SYSVIEW_Conf();
 80005c2:	f004 fb9d 	bl	8004d00 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80005c6:	f005 fc4f 	bl	8005e68 <SEGGER_SYSVIEW_Start>


	Local_Status = xTaskCreate(Task1Handler, "Task-1", 100, "Hello World from Task 1", 2, &Task1Handle);
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2302      	movs	r3, #2
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <main+0x9c>)
 80005d6:	2264      	movs	r2, #100	; 0x64
 80005d8:	4919      	ldr	r1, [pc, #100]	; (8000640 <main+0xa0>)
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <main+0xa4>)
 80005dc:	f002 fd1e 	bl	800301c <xTaskCreate>
 80005e0:	6178      	str	r0, [r7, #20]

	configASSERT(Local_Status == pdPASS);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d00a      	beq.n	80005fe <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fa:	bf00      	nop
 80005fc:	e7fe      	b.n	80005fc <main+0x5c>

	Local_Status = xTaskCreate(Task2Handler, "Task-2", 100, "Hello World from Task 2", 2, &Task2Handle);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <main+0xa8>)
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	4910      	ldr	r1, [pc, #64]	; (800064c <main+0xac>)
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <main+0xb0>)
 800060e:	f002 fd05 	bl	800301c <xTaskCreate>
 8000612:	6178      	str	r0, [r7, #20]

	configASSERT(Local_Status == pdPASS);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x90>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	60fb      	str	r3, [r7, #12]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x8e>

	vTaskStartScheduler();
 8000630:	f002 fe7c 	bl	800332c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x94>
 8000636:	bf00      	nop
 8000638:	e0001000 	.word	0xe0001000
 800063c:	080072e8 	.word	0x080072e8
 8000640:	08007300 	.word	0x08007300
 8000644:	08000861 	.word	0x08000861
 8000648:	08007308 	.word	0x08007308
 800064c:	08007320 	.word	0x08007320
 8000650:	08000871 	.word	0x08000871

08000654 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fb7c 	bl	8006d60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8cc 	bl	8001880 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80006ee:	f000 f8d9 	bl	80008a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fd3a 	bl	8001188 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800071a:	f000 f8c3 	bl	80008a4 <Error_Handler>
	}
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fdd6 	bl	8002318 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000772:	f000 f897 	bl	80008a4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000008c 	.word	0x2000008c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_GPIO_Init+0xd4>)
 8000810:	f000 fca0 	bl	8001154 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_GPIO_Init+0xd8>)
 800082c:	f000 fafe 	bl	8000e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000830:	2320      	movs	r3, #32
 8000832:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xd4>)
 8000848:	f000 faf0 	bl	8000e2c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <Task1Handler>:

/* USER CODE BEGIN 4 */
void Task1Handler(void* Parameters)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n",(char*)Parameters);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f006 f989 	bl	8006b80 <puts>
 800086e:	e7fb      	b.n	8000868 <Task1Handler+0x8>

08000870 <Task2Handler>:
		//taskYIELD();
	}
}
void Task2Handler(void* Parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n",(char*)Parameters);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f006 f981 	bl	8006b80 <puts>
 800087e:	e7fb      	b.n	8000878 <Task2Handler+0x8>

08000880 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000892:	f000 f9c9 	bl	8000c28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40001000 	.word	0x40001000

080008a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000976:	f000 fa59 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	; 0x38
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <HAL_InitTick+0xe4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a32      	ldr	r2, [pc, #200]	; (8000a74 <HAL_InitTick+0xe4>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009bc:	f107 0210 	add.w	r2, r7, #16
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fcf8 	bl	80013bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d6:	f000 fcc9 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 80009da:	6378      	str	r0, [r7, #52]	; 0x34
 80009dc:	e004      	b.n	80009e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009de:	f000 fcc5 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 80009e2:	4603      	mov	r3, r0
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_InitTick+0xe8>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	0c9b      	lsrs	r3, r3, #18
 80009f2:	3b01      	subs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_InitTick+0xec>)
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <HAL_InitTick+0xf0>)
 80009fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_InitTick+0xec>)
 80009fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_InitTick+0xec>)
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_InitTick+0xec>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a1c:	4817      	ldr	r0, [pc, #92]	; (8000a7c <HAL_InitTick+0xec>)
 8000a1e:	f001 f9cd 	bl	8001dbc <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11b      	bne.n	8000a68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <HAL_InitTick+0xec>)
 8000a32:	f001 fa1d 	bl	8001e70 <HAL_TIM_Base_Start_IT>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d111      	bne.n	8000a68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a44:	2036      	movs	r0, #54	; 0x36
 8000a46:	f000 f9e3 	bl	8000e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d808      	bhi.n	8000a62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2036      	movs	r0, #54	; 0x36
 8000a56:	f000 f9bf 	bl	8000dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0xf4>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e002      	b.n	8000a68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	200000d0 	.word	0x200000d0
 8000a80:	40001000 	.word	0x40001000
 8000a84:	20000004 	.word	0x20000004

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM6_DAC_IRQHandler+0x10>)
 8000aba:	f001 fa49 	bl	8001f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d0 	.word	0x200000d0

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_isatty>:

int _isatty(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd7 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f006 f90b 	bl	8006dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fced 	bl	80005a0 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bd4:	08007450 	.word	0x08007450
  ldr r2, =_sbss
 8000bd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bdc:	20014688 	.word	0x20014688

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8d8 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff febc 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe4a 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000118 	.word	0x20000118

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000118 	.word	0x20000118

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e165      	b.n	8001114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8154 	bne.w	800110e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80ae 	beq.w	800110e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x300>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a5c      	ldr	r2, [pc, #368]	; (800112c <HAL_GPIO_Init+0x300>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	; (800112c <HAL_GPIO_Init+0x300>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a58      	ldr	r2, [pc, #352]	; (8001130 <HAL_GPIO_Init+0x304>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x308>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x30c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x310>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x314>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x318>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x20a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x31c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x206>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_GPIO_Init+0x320>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x202>
 800102a:	2306      	movs	r3, #6
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800102e:	2307      	movs	r3, #7
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x304>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <HAL_GPIO_Init+0x324>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x324>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a26      	ldr	r2, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_GPIO_Init+0x324>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_GPIO_Init+0x324>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x324>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_GPIO_Init+0x324>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae96 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0cc      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d90c      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b8      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	494d      	ldr	r1, [pc, #308]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d044      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d119      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e07f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d003      	beq.n	8001246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	2b03      	cmp	r3, #3
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e06f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e067      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4934      	ldr	r1, [pc, #208]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001278:	f7ff fcea 	bl	8000c50 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fce6 	bl	8000c50 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e04f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d20c      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e032      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130e:	f000 f887 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1c8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fb2e 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00
 8001344:	40023800 	.word	0x40023800
 8001348:	08007400 	.word	0x08007400
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_RCC_GetHCLKFreq+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001370:	f7ff fff0 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	0a9b      	lsrs	r3, r3, #10
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4903      	ldr	r1, [pc, #12]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	08007410 	.word	0x08007410

08001394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001398:	f7ff ffdc 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 800139c:	4602      	mov	r2, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0b5b      	lsrs	r3, r3, #13
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4903      	ldr	r1, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08007410 	.word	0x08007410

080013bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220f      	movs	r2, #15
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_RCC_GetClockConfig+0x60>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 020f 	and.w	r2, r3, #15
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b0ae      	sub	sp, #184	; 0xb8
 8001426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001446:	4bcb      	ldr	r3, [pc, #812]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b0c      	cmp	r3, #12
 8001450:	f200 8206 	bhi.w	8001860 <HAL_RCC_GetSysClockFreq+0x440>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	08001491 	.word	0x08001491
 8001460:	08001861 	.word	0x08001861
 8001464:	08001861 	.word	0x08001861
 8001468:	08001861 	.word	0x08001861
 800146c:	08001499 	.word	0x08001499
 8001470:	08001861 	.word	0x08001861
 8001474:	08001861 	.word	0x08001861
 8001478:	08001861 	.word	0x08001861
 800147c:	080014a1 	.word	0x080014a1
 8001480:	08001861 	.word	0x08001861
 8001484:	08001861 	.word	0x08001861
 8001488:	08001861 	.word	0x08001861
 800148c:	08001691 	.word	0x08001691
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001490:	4bb9      	ldr	r3, [pc, #740]	; (8001778 <HAL_RCC_GetSysClockFreq+0x358>)
 8001492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001496:	e1e7      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001498:	4bb8      	ldr	r3, [pc, #736]	; (800177c <HAL_RCC_GetSysClockFreq+0x35c>)
 800149a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800149e:	e1e3      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a0:	4bb4      	ldr	r3, [pc, #720]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ac:	4bb1      	ldr	r3, [pc, #708]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d071      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b8:	4bae      	ldr	r3, [pc, #696]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	6439      	str	r1, [r7, #64]	; 0x40
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001510:	4649      	mov	r1, r9
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4641      	mov	r1, r8
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4641      	mov	r1, r8
 8001520:	1a51      	subs	r1, r2, r1
 8001522:	63b9      	str	r1, [r7, #56]	; 0x38
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0301 	sbc.w	r3, r3, r1
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001538:	4649      	mov	r1, r9
 800153a:	00cb      	lsls	r3, r1, #3
 800153c:	4641      	mov	r1, r8
 800153e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001542:	4641      	mov	r1, r8
 8001544:	00ca      	lsls	r2, r1, #3
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	4603      	mov	r3, r0
 800154c:	4622      	mov	r2, r4
 800154e:	189b      	adds	r3, r3, r2
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
 8001552:	462b      	mov	r3, r5
 8001554:	460a      	mov	r2, r1
 8001556:	eb42 0303 	adc.w	r3, r2, r3
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001568:	4629      	mov	r1, r5
 800156a:	024b      	lsls	r3, r1, #9
 800156c:	4621      	mov	r1, r4
 800156e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001572:	4621      	mov	r1, r4
 8001574:	024a      	lsls	r2, r1, #9
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800157e:	2200      	movs	r2, #0
 8001580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001588:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800158c:	f7fe fe8a 	bl	80002a4 <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800159a:	e067      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	4b75      	ldr	r3, [pc, #468]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80015b6:	2300      	movs	r3, #0
 80015b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015be:	4622      	mov	r2, r4
 80015c0:	462b      	mov	r3, r5
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	0159      	lsls	r1, r3, #5
 80015cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d0:	0150      	lsls	r0, r2, #5
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4621      	mov	r1, r4
 80015d8:	1a51      	subs	r1, r2, r1
 80015da:	62b9      	str	r1, [r7, #40]	; 0x28
 80015dc:	4629      	mov	r1, r5
 80015de:	eb63 0301 	sbc.w	r3, r3, r1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015f0:	4649      	mov	r1, r9
 80015f2:	018b      	lsls	r3, r1, #6
 80015f4:	4641      	mov	r1, r8
 80015f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fa:	4641      	mov	r1, r8
 80015fc:	018a      	lsls	r2, r1, #6
 80015fe:	4641      	mov	r1, r8
 8001600:	ebb2 0a01 	subs.w	sl, r2, r1
 8001604:	4649      	mov	r1, r9
 8001606:	eb63 0b01 	sbc.w	fp, r3, r1
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800161a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800161e:	4692      	mov	sl, r2
 8001620:	469b      	mov	fp, r3
 8001622:	4623      	mov	r3, r4
 8001624:	eb1a 0303 	adds.w	r3, sl, r3
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	462b      	mov	r3, r5
 800162c:	eb4b 0303 	adc.w	r3, fp, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800163e:	4629      	mov	r1, r5
 8001640:	028b      	lsls	r3, r1, #10
 8001642:	4621      	mov	r1, r4
 8001644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001648:	4621      	mov	r1, r4
 800164a:	028a      	lsls	r2, r1, #10
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001654:	2200      	movs	r2, #0
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
 8001658:	677a      	str	r2, [r7, #116]	; 0x74
 800165a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800165e:	f7fe fe21 	bl	80002a4 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4613      	mov	r3, r2
 8001668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	3301      	adds	r3, #1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800167e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800168e:	e0eb      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d06b      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80016b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
 80016c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016c4:	4622      	mov	r2, r4
 80016c6:	462b      	mov	r3, r5
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	0159      	lsls	r1, r3, #5
 80016d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d6:	0150      	lsls	r0, r2, #5
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4621      	mov	r1, r4
 80016de:	1a51      	subs	r1, r2, r1
 80016e0:	61b9      	str	r1, [r7, #24]
 80016e2:	4629      	mov	r1, r5
 80016e4:	eb63 0301 	sbc.w	r3, r3, r1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016f6:	4659      	mov	r1, fp
 80016f8:	018b      	lsls	r3, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001700:	4651      	mov	r1, sl
 8001702:	018a      	lsls	r2, r1, #6
 8001704:	4651      	mov	r1, sl
 8001706:	ebb2 0801 	subs.w	r8, r2, r1
 800170a:	4659      	mov	r1, fp
 800170c:	eb63 0901 	sbc.w	r9, r3, r1
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800171c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001724:	4690      	mov	r8, r2
 8001726:	4699      	mov	r9, r3
 8001728:	4623      	mov	r3, r4
 800172a:	eb18 0303 	adds.w	r3, r8, r3
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	462b      	mov	r3, r5
 8001732:	eb49 0303 	adc.w	r3, r9, r3
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001744:	4629      	mov	r1, r5
 8001746:	024b      	lsls	r3, r1, #9
 8001748:	4621      	mov	r1, r4
 800174a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800174e:	4621      	mov	r1, r4
 8001750:	024a      	lsls	r2, r1, #9
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175a:	2200      	movs	r2, #0
 800175c:	65bb      	str	r3, [r7, #88]	; 0x58
 800175e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001764:	f7fe fd9e 	bl	80002a4 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001772:	e065      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x420>
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_GetSysClockFreq+0x458>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	2200      	movs	r2, #0
 8001788:	4618      	mov	r0, r3
 800178a:	4611      	mov	r1, r2
 800178c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001790:	653b      	str	r3, [r7, #80]	; 0x50
 8001792:	2300      	movs	r3, #0
 8001794:	657b      	str	r3, [r7, #84]	; 0x54
 8001796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800179a:	4642      	mov	r2, r8
 800179c:	464b      	mov	r3, r9
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	0159      	lsls	r1, r3, #5
 80017a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ac:	0150      	lsls	r0, r2, #5
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4641      	mov	r1, r8
 80017b4:	1a51      	subs	r1, r2, r1
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	4649      	mov	r1, r9
 80017ba:	eb63 0301 	sbc.w	r3, r3, r1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017cc:	4659      	mov	r1, fp
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4651      	mov	r1, sl
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4651      	mov	r1, sl
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4651      	mov	r1, sl
 80017dc:	1a54      	subs	r4, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0501 	sbc.w	r5, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	00eb      	lsls	r3, r5, #3
 80017ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f2:	00e2      	lsls	r2, r4, #3
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	4643      	mov	r3, r8
 80017fa:	18e3      	adds	r3, r4, r3
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	464b      	mov	r3, r9
 8001800:	eb45 0303 	adc.w	r3, r5, r3
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001812:	4629      	mov	r1, r5
 8001814:	028b      	lsls	r3, r1, #10
 8001816:	4621      	mov	r1, r4
 8001818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800181c:	4621      	mov	r1, r4
 800181e:	028a      	lsls	r2, r1, #10
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001828:	2200      	movs	r2, #0
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
 800182c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800182e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001832:	f7fe fd37 	bl	80002a4 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4613      	mov	r3, r2
 800183c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_GetSysClockFreq+0x458>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0f1b      	lsrs	r3, r3, #28
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800184e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800185e:	e003      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800186c:	4618      	mov	r0, r3
 800186e:	37b8      	adds	r7, #184	; 0xb8
 8001870:	46bd      	mov	sp, r7
 8001872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	00f42400 	.word	0x00f42400

08001880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e28d      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8083 	beq.w	80019a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018a0:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d019      	beq.n	80018e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ac:	4b91      	ldr	r3, [pc, #580]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018b8:	4b8e      	ldr	r3, [pc, #568]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b84      	ldr	r3, [pc, #528]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x124>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e25a      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x90>
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xcc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xb4>
 800191a:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a72      	ldr	r2, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xcc>
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6b      	ldr	r2, [pc, #428]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f97c 	bl	8000c50 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f978 	bl	8000c50 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e21f      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xdc>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f968 	bl	8000c50 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f964 	bl	8000c50 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e20b      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x104>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d06f      	beq.n	8001a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d017      	beq.n	80019ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019be:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x186>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1d3      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4937      	ldr	r1, [pc, #220]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_RCC_OscConfig+0x278>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f911 	bl	8000c50 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff f90d 	bl	8000c50 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1b4      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4925      	ldr	r1, [pc, #148]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x278>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f8f0 	bl	8000c50 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff f8ec 	bl	8000c50 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e193      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d036      	beq.n	8001b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d016      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x27c>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff f8d0 	bl	8000c50 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f8cc 	bl	8000c50 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e173      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x234>
 8001ad2:	e01b      	b.n	8001b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f8b9 	bl	8000c50 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	e00e      	b.n	8001b00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f8b5 	bl	8000c50 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d907      	bls.n	8001b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e15c      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	42470000 	.word	0x42470000
 8001afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b8a      	ldr	r3, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ea      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8097 	beq.w	8001c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b83      	ldr	r3, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a75      	ldr	r2, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f875 	bl	8000c50 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff f871 	bl	8000c50 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e118      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x31e>
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x358>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x340>
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a60      	ldr	r2, [pc, #384]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x358>
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a59      	ldr	r2, [pc, #356]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f836 	bl	8000c50 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff f832 	bl	8000c50 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0d7      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ee      	beq.n	8001be8 <HAL_RCC_OscConfig+0x368>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f820 	bl	8000c50 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f81c 	bl	8000c50 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0c1      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ee      	bne.n	8001c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ad 	beq.w	8001dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d060      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d145      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fff0 	bl	8000c50 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe ffec 	bl	8000c50 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e093      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	3b01      	subs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	071b      	lsls	r3, r3, #28
 8001cbe:	491b      	ldr	r1, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7fe ffc1 	bl	8000c50 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe ffbd 	bl	8000c50 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e064      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x452>
 8001cf0:	e05c      	b.n	8001dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7fe ffaa 	bl	8000c50 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe ffa6 	bl	8000c50 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e04d      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x480>
 8001d1e:	e045      	b.n	8001dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e040      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_RCC_OscConfig+0x538>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d030      	beq.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d129      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d122      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d119      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10f      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f839 	bl	8001e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 f9d8 	bl	80021b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d001      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e04e      	b.n	8001f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d022      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb2:	d01d      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d018      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x80>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d010      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	e007      	b.n	8001f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40000800 	.word	0x40000800
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	40010400 	.word	0x40010400
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40001800 	.word	0x40001800

08001f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0202 	mvn.w	r2, #2
 8001f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8ee 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8e0 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8f1 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0204 	mvn.w	r2, #4
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8c4 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8b6 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f8c7 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b08      	cmp	r3, #8
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0208 	mvn.w	r2, #8
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f89a 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f88c 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f89d 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b10      	cmp	r3, #16
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b10      	cmp	r3, #16
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0210 	mvn.w	r2, #16
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2208      	movs	r2, #8
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f870 	bl	8002174 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f862 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f873 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0201 	mvn.w	r2, #1
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fbd6 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f902 	bl	8002304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f838 	bl	800219c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0220 	mvn.w	r2, #32
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8cc 	bl	80022f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <TIM_Base_SetConfig+0x114>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d00f      	beq.n	80021f0 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3d      	ldr	r2, [pc, #244]	; (80022c8 <TIM_Base_SetConfig+0x118>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00b      	beq.n	80021f0 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <TIM_Base_SetConfig+0x11c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <TIM_Base_SetConfig+0x120>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <TIM_Base_SetConfig+0x124>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <TIM_Base_SetConfig+0x114>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02b      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d027      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <TIM_Base_SetConfig+0x118>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d023      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <TIM_Base_SetConfig+0x11c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <TIM_Base_SetConfig+0x120>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01b      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <TIM_Base_SetConfig+0x124>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d017      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <TIM_Base_SetConfig+0x128>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <TIM_Base_SetConfig+0x12c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00f      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <TIM_Base_SetConfig+0x130>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00b      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <TIM_Base_SetConfig+0x134>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <TIM_Base_SetConfig+0x138>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d003      	beq.n	8002262 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <TIM_Base_SetConfig+0x13c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d108      	bne.n	8002274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <TIM_Base_SetConfig+0x114>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_Base_SetConfig+0xf8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <TIM_Base_SetConfig+0x124>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	615a      	str	r2, [r3, #20]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40000c00 	.word	0x40000c00
 80022d4:	40010400 	.word	0x40010400
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800
 80022e4:	40001800 	.word	0x40001800
 80022e8:	40001c00 	.word	0x40001c00
 80022ec:	40002000 	.word	0x40002000

080022f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e03f      	b.n	80023aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fade 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f829 	bl	80023b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b8:	b0c0      	sub	sp, #256	; 0x100
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	ea40 0301 	orr.w	r3, r0, r1
 80023dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800240c:	f021 010c 	bic.w	r1, r1, #12
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800241a:	430b      	orrs	r3, r1
 800241c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	6999      	ldr	r1, [r3, #24]
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	ea40 0301 	orr.w	r3, r0, r1
 800243a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <UART_SetConfig+0x2cc>)
 8002444:	429a      	cmp	r2, r3
 8002446:	d005      	beq.n	8002454 <UART_SetConfig+0xa0>
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <UART_SetConfig+0x2d0>)
 8002450:	429a      	cmp	r2, r3
 8002452:	d104      	bne.n	800245e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002454:	f7fe ff9e 	bl	8001394 <HAL_RCC_GetPCLK2Freq>
 8002458:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800245c:	e003      	b.n	8002466 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800245e:	f7fe ff85 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 8002462:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002470:	f040 810c 	bne.w	800268c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002478:	2200      	movs	r2, #0
 800247a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800247e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002482:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	1891      	adds	r1, r2, r2
 800248c:	65b9      	str	r1, [r7, #88]	; 0x58
 800248e:	415b      	adcs	r3, r3
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002496:	4621      	mov	r1, r4
 8002498:	eb12 0801 	adds.w	r8, r2, r1
 800249c:	4629      	mov	r1, r5
 800249e:	eb43 0901 	adc.w	r9, r3, r1
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b6:	4690      	mov	r8, r2
 80024b8:	4699      	mov	r9, r3
 80024ba:	4623      	mov	r3, r4
 80024bc:	eb18 0303 	adds.w	r3, r8, r3
 80024c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024c4:	462b      	mov	r3, r5
 80024c6:	eb49 0303 	adc.w	r3, r9, r3
 80024ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024e2:	460b      	mov	r3, r1
 80024e4:	18db      	adds	r3, r3, r3
 80024e6:	653b      	str	r3, [r7, #80]	; 0x50
 80024e8:	4613      	mov	r3, r2
 80024ea:	eb42 0303 	adc.w	r3, r2, r3
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
 80024f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024f8:	f7fd fed4 	bl	80002a4 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <UART_SetConfig+0x2d4>)
 8002502:	fba3 2302 	umull	r2, r3, r3, r2
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	011c      	lsls	r4, r3, #4
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002514:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002518:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800251c:	4642      	mov	r2, r8
 800251e:	464b      	mov	r3, r9
 8002520:	1891      	adds	r1, r2, r2
 8002522:	64b9      	str	r1, [r7, #72]	; 0x48
 8002524:	415b      	adcs	r3, r3
 8002526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002528:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800252c:	4641      	mov	r1, r8
 800252e:	eb12 0a01 	adds.w	sl, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb43 0b01 	adc.w	fp, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002544:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800254c:	4692      	mov	sl, r2
 800254e:	469b      	mov	fp, r3
 8002550:	4643      	mov	r3, r8
 8002552:	eb1a 0303 	adds.w	r3, sl, r3
 8002556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800255a:	464b      	mov	r3, r9
 800255c:	eb4b 0303 	adc.w	r3, fp, r3
 8002560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002570:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002574:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002578:	460b      	mov	r3, r1
 800257a:	18db      	adds	r3, r3, r3
 800257c:	643b      	str	r3, [r7, #64]	; 0x40
 800257e:	4613      	mov	r3, r2
 8002580:	eb42 0303 	adc.w	r3, r2, r3
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
 8002586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800258a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800258e:	f7fd fe89 	bl	80002a4 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4611      	mov	r1, r2
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <UART_SetConfig+0x2d4>)
 800259a:	fba3 2301 	umull	r2, r3, r3, r1
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2264      	movs	r2, #100	; 0x64
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <UART_SetConfig+0x2d4>)
 80025b0:	fba3 2302 	umull	r2, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025bc:	441c      	add	r4, r3
 80025be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025d0:	4642      	mov	r2, r8
 80025d2:	464b      	mov	r3, r9
 80025d4:	1891      	adds	r1, r2, r2
 80025d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025d8:	415b      	adcs	r3, r3
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025e0:	4641      	mov	r1, r8
 80025e2:	1851      	adds	r1, r2, r1
 80025e4:	6339      	str	r1, [r7, #48]	; 0x30
 80025e6:	4649      	mov	r1, r9
 80025e8:	414b      	adcs	r3, r1
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025f8:	4659      	mov	r1, fp
 80025fa:	00cb      	lsls	r3, r1, #3
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002602:	4651      	mov	r1, sl
 8002604:	00ca      	lsls	r2, r1, #3
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	4603      	mov	r3, r0
 800260c:	4642      	mov	r2, r8
 800260e:	189b      	adds	r3, r3, r2
 8002610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002614:	464b      	mov	r3, r9
 8002616:	460a      	mov	r2, r1
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800262c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002634:	460b      	mov	r3, r1
 8002636:	18db      	adds	r3, r3, r3
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
 800263a:	4613      	mov	r3, r2
 800263c:	eb42 0303 	adc.w	r3, r2, r3
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002646:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800264a:	f7fd fe2b 	bl	80002a4 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <UART_SetConfig+0x2d4>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2164      	movs	r1, #100	; 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <UART_SetConfig+0x2d4>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 0207 	and.w	r2, r3, #7
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4422      	add	r2, r4
 800267a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800267c:	e106      	b.n	800288c <UART_SetConfig+0x4d8>
 800267e:	bf00      	nop
 8002680:	40011000 	.word	0x40011000
 8002684:	40011400 	.word	0x40011400
 8002688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002690:	2200      	movs	r2, #0
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002696:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800269a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800269e:	4642      	mov	r2, r8
 80026a0:	464b      	mov	r3, r9
 80026a2:	1891      	adds	r1, r2, r2
 80026a4:	6239      	str	r1, [r7, #32]
 80026a6:	415b      	adcs	r3, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ae:	4641      	mov	r1, r8
 80026b0:	1854      	adds	r4, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb43 0501 	adc.w	r5, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026d4:	464b      	mov	r3, r9
 80026d6:	eb45 0303 	adc.w	r3, r5, r3
 80026da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026fa:	4629      	mov	r1, r5
 80026fc:	008b      	lsls	r3, r1, #2
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002704:	4621      	mov	r1, r4
 8002706:	008a      	lsls	r2, r1, #2
 8002708:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800270c:	f7fd fdca 	bl	80002a4 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <UART_SetConfig+0x4e4>)
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	011c      	lsls	r4, r3, #4
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002728:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800272c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	61b9      	str	r1, [r7, #24]
 8002738:	415b      	adcs	r3, r3
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6139      	str	r1, [r7, #16]
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	67bb      	str	r3, [r7, #120]	; 0x78
 800278a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002798:	4649      	mov	r1, r9
 800279a:	008b      	lsls	r3, r1, #2
 800279c:	4641      	mov	r1, r8
 800279e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a2:	4641      	mov	r1, r8
 80027a4:	008a      	lsls	r2, r1, #2
 80027a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027aa:	f7fd fd7b 	bl	80002a4 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	4b38      	ldr	r3, [pc, #224]	; (8002898 <UART_SetConfig+0x4e4>)
 80027b6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2264      	movs	r2, #100	; 0x64
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	1acb      	subs	r3, r1, r3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a33      	ldr	r2, [pc, #204]	; (8002898 <UART_SetConfig+0x4e4>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d4:	441c      	add	r4, r3
 80027d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027da:	2200      	movs	r2, #0
 80027dc:	673b      	str	r3, [r7, #112]	; 0x70
 80027de:	677a      	str	r2, [r7, #116]	; 0x74
 80027e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	1891      	adds	r1, r2, r2
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	415b      	adcs	r3, r3
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f4:	4641      	mov	r1, r8
 80027f6:	1851      	adds	r1, r2, r1
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	4649      	mov	r1, r9
 80027fc:	414b      	adcs	r3, r1
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800280c:	4659      	mov	r1, fp
 800280e:	00cb      	lsls	r3, r1, #3
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002816:	4651      	mov	r1, sl
 8002818:	00ca      	lsls	r2, r1, #3
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	4603      	mov	r3, r0
 8002820:	4642      	mov	r2, r8
 8002822:	189b      	adds	r3, r3, r2
 8002824:	66bb      	str	r3, [r7, #104]	; 0x68
 8002826:	464b      	mov	r3, r9
 8002828:	460a      	mov	r2, r1
 800282a:	eb42 0303 	adc.w	r3, r2, r3
 800282e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	663b      	str	r3, [r7, #96]	; 0x60
 800283a:	667a      	str	r2, [r7, #100]	; 0x64
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002848:	4649      	mov	r1, r9
 800284a:	008b      	lsls	r3, r1, #2
 800284c:	4641      	mov	r1, r8
 800284e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002852:	4641      	mov	r1, r8
 8002854:	008a      	lsls	r2, r1, #2
 8002856:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800285a:	f7fd fd23 	bl	80002a4 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <UART_SetConfig+0x4e4>)
 8002864:	fba3 1302 	umull	r1, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <UART_SetConfig+0x4e4>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4422      	add	r2, r4
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002892:	46bd      	mov	sp, r7
 8002894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0208 	add.w	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 0208 	add.w	r2, r3, #8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0208 	add.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d103      	bne.n	8002916 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e00c      	b.n	8002930 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3308      	adds	r3, #8
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e002      	b.n	8002924 <vListInsert+0x2e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d2f6      	bcs.n	800291e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6892      	ldr	r2, [r2, #8]
 800297e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6852      	ldr	r2, [r2, #4]
 8002988:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d103      	bne.n	800299c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80029c6:	2301      	movs	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericReset+0x2e>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	60fb      	str	r3, [r7, #12]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05d      	beq.n	8002aac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d059      	beq.n	8002aac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2100      	movs	r1, #0
 8002a02:	fba3 2302 	umull	r2, r3, r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d000      	beq.n	8002a0c <xQueueGenericReset+0x50>
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d14c      	bne.n	8002aac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002a12:	f001 fe71 	bl	80046f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	6939      	ldr	r1, [r7, #16]
 8002a20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	441a      	add	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	441a      	add	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d114      	bne.n	8002a92 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01a      	beq.n	8002aa6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3310      	adds	r3, #16
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ffdb 	bl	8003a30 <xTaskRemoveFromEventList>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <xQueueGenericReset+0x11c>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	e009      	b.n	8002aa6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff00 	bl	800289c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fefb 	bl	800289c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002aa6:	f001 fe57 	bl	8004758 <vPortExitCritical>
 8002aaa:	e001      	b.n	8002ab0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <xQueueGenericReset+0x110>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60bb      	str	r3, [r7, #8]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002acc:	697b      	ldr	r3, [r7, #20]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02e      	beq.n	8002b52 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002af4:	2100      	movs	r1, #0
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	fba3 2302 	umull	r2, r3, r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d000      	beq.n	8002b04 <xQueueGenericCreate+0x28>
 8002b02:	2101      	movs	r1, #1
 8002b04:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d123      	bne.n	8002b52 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b12:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002b16:	d81c      	bhi.n	8002b52 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	3350      	adds	r3, #80	; 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 ff10 	bl	800494c <pvPortMalloc>
 8002b2c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01c      	beq.n	8002b6e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3350      	adds	r3, #80	; 0x50
 8002b3c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f814 	bl	8002b78 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002b50:	e00d      	b.n	8002b6e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueGenericCreate+0x92>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	613b      	str	r3, [r7, #16]
    }
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
    }
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	69b8      	ldr	r0, [r7, #24]
 8002baa:	f7ff ff07 	bl	80029bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	2073      	movs	r0, #115	; 0x73
 8002bbe:	f003 f84b 	bl	8005c58 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b08f      	sub	sp, #60	; 0x3c
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <xQueueReceive+0x30>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	623b      	str	r3, [r7, #32]
    }
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <xQueueReceive+0x3e>
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xQueueReceive+0x42>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueReceive+0x44>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueReceive+0x5e>
        __asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61fb      	str	r3, [r7, #28]
    }
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c2a:	f001 f913 	bl	8003e54 <xTaskGetSchedulerState>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <xQueueReceive+0x6e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <xQueueReceive+0x72>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <xQueueReceive+0x74>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueReceive+0x8e>
        __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61bb      	str	r3, [r7, #24]
    }
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c5a:	f001 fd4d 	bl	80046f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02f      	beq.n	8002cca <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6e:	f000 f8bd 	bl	8002dec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fd1b 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f003 fd17 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002c82:	4602      	mov	r2, r0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2101      	movs	r1, #1
 8002c88:	9100      	str	r1, [sp, #0]
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	205c      	movs	r0, #92	; 0x5c
 8002c8e:	f003 f859 	bl	8005d44 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00f      	beq.n	8002cc2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fec2 	bl	8003a30 <xTaskRemoveFromEventList>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <xQueueReceive+0x21c>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cc2:	f001 fd49 	bl	8004758 <vPortExitCritical>
                return pdPASS;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e08a      	b.n	8002de0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d113      	bne.n	8002cf8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cd0:	f001 fd42 	bl	8004758 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fcea 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f003 fce6 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	9100      	str	r1, [sp, #0]
 8002cec:	4621      	mov	r1, r4
 8002cee:	205c      	movs	r0, #92	; 0x5c
 8002cf0:	f003 f828 	bl	8005d44 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e073      	b.n	8002de0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 ff6c 	bl	8003be0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d0c:	f001 fd24 	bl	8004758 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d10:	f000 fb6e 	bl	80033f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d14:	f001 fcf0 	bl	80046f8 <vPortEnterCritical>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0x162>
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <xQueueReceive+0x178>
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d44:	f001 fd08 	bl	8004758 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d48:	1d3a      	adds	r2, r7, #4
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 ff5b 	bl	8003c0c <xTaskCheckForTimeOut>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d124      	bne.n	8002da6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5e:	f000 f8bd 	bl	8002edc <prvIsQueueEmpty>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d018      	beq.n	8002d9a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fdf1 	bl	8003958 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d78:	f000 f85e 	bl	8002e38 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d7c:	f000 fb46 	bl	800340c <xTaskResumeAll>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f47f af69 	bne.w	8002c5a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <xQueueReceive+0x21c>)
 8002d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	e75f      	b.n	8002c5a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9c:	f000 f84c 	bl	8002e38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002da0:	f000 fb34 	bl	800340c <xTaskResumeAll>
 8002da4:	e759      	b.n	8002c5a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da8:	f000 f846 	bl	8002e38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002dac:	f000 fb2e 	bl	800340c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db2:	f000 f893 	bl	8002edc <prvIsQueueEmpty>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f43f af4e 	beq.w	8002c5a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 fc75 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f003 fc71 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	9100      	str	r1, [sp, #0]
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	205c      	movs	r0, #92	; 0x5c
 8002dda:	f002 ffb3 	bl	8005d44 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002dde:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d303      	bcc.n	8002e20 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f003 fffa 	bl	8006e24 <memcpy>
    }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e40:	f001 fc5a 	bl	80046f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	e011      	b.n	8002e72 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fde8 	bl	8003a30 <xTaskRemoveFromEventList>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002e66:	f000 ff37 	bl	8003cd8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dce9      	bgt.n	8002e4e <prvUnlockQueue+0x16>
 8002e7a:	e000      	b.n	8002e7e <prvUnlockQueue+0x46>
                    break;
 8002e7c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e86:	f001 fc67 	bl	8004758 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e8a:	f001 fc35 	bl	80046f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e94:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e96:	e011      	b.n	8002ebc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fdc3 	bl	8003a30 <xTaskRemoveFromEventList>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002eb0:	f000 ff12 	bl	8003cd8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dce9      	bgt.n	8002e98 <prvUnlockQueue+0x60>
 8002ec4:	e000      	b.n	8002ec8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ec6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	22ff      	movs	r2, #255	; 0xff
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ed0:	f001 fc42 	bl	8004758 <vPortExitCritical>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ee4:	f001 fc08 	bl	80046f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002efa:	f001 fc2d 	bl	8004758 <vPortExitCritical>

    return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60fb      	str	r3, [r7, #12]
    }
 8002f2e:	bf00      	nop
 8002f30:	e7fe      	b.n	8002f30 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d024      	beq.n	8002f82 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e01e      	b.n	8002f7c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <vQueueAddToRegistry+0xa8>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d105      	bne.n	8002f5a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <vQueueAddToRegistry+0xa8>)
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
                    break;
 8002f58:	e013      	b.n	8002f82 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <vQueueAddToRegistry+0x6e>
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <vQueueAddToRegistry+0xa8>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <vQueueAddToRegistry+0xa8>)
 8002f72:	4413      	add	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d9dd      	bls.n	8002f3e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00f      	beq.n	8002fa8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fb8a 	bl	80066b0 <SEGGER_SYSVIEW_ShrinkId>
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2071      	movs	r0, #113	; 0x71
 8002fa4:	f002 fdfe 	bl	8005ba4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000011c 	.word	0x2000011c

08002fb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fc4:	f001 fb98 	bl	80046f8 <vPortEnterCritical>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d103      	bne.n	8002fde <vQueueWaitForMessageRestricted+0x2a>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d103      	bne.n	8002ff4 <vQueueWaitForMessageRestricted+0x40>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	f001 fbb0 	bl	8004758 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fcc9 	bl	80039a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff12 	bl	8002e38 <prvUnlockQueue>
    }
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fc8b 	bl	800494c <pvPortMalloc>
 8003036:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d013      	beq.n	8003066 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800303e:	2058      	movs	r0, #88	; 0x58
 8003040:	f001 fc84 	bl	800494c <pvPortMalloc>
 8003044:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800304c:	2258      	movs	r2, #88	; 0x58
 800304e:	2100      	movs	r1, #0
 8003050:	69f8      	ldr	r0, [r7, #28]
 8003052:	f003 fe85 	bl	8006d60 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
 800305c:	e005      	b.n	800306a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f001 fd2e 	bl	8004ac0 <vPortFree>
 8003064:	e001      	b.n	800306a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	2300      	movs	r3, #0
 8003074:	9303      	str	r3, [sp, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f80e 	bl	80030a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800308c:	69f8      	ldr	r0, [r7, #28]
 800308e:	f000 f899 	bl	80031c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e002      	b.n	800309e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800309e:	69bb      	ldr	r3, [r7, #24]
    }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	21a5      	movs	r1, #165	; 0xa5
 80030c2:	f003 fe4d 	bl	8006d60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030d0:	3b01      	subs	r3, #1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	617b      	str	r3, [r7, #20]
    }
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01e      	beq.n	8003144 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e012      	b.n	8003132 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	7819      	ldrb	r1, [r3, #0]
 8003114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	3334      	adds	r3, #52	; 0x34
 800311c:	460a      	mov	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3301      	adds	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d9e9      	bls.n	800310c <prvInitialiseNewTask+0x64>
 8003138:	e000      	b.n	800313c <prvInitialiseNewTask+0x94>
            {
                break;
 800313a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	2b04      	cmp	r3, #4
 8003148:	d90a      	bls.n	8003160 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	613b      	str	r3, [r7, #16]
    }
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	2b04      	cmp	r3, #4
 8003164:	d901      	bls.n	800316a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003166:	2304      	movs	r3, #4
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003174:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	3304      	adds	r3, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fbae 	bl	80028dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	3318      	adds	r3, #24
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fba9 	bl	80028dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	f1c3 0205 	rsb	r2, r3, #5
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	69b8      	ldr	r0, [r7, #24]
 80031a6:	f001 f977 	bl	8004498 <pxPortInitialiseStack>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031cc:	f001 fa94 	bl	80046f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <prvAddNewTaskToReadyList+0x14c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a4e      	ldr	r2, [pc, #312]	; (8003310 <prvAddNewTaskToReadyList+0x14c>)
 80031d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031da:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <prvAddNewTaskToReadyList+0x150>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031e2:	4a4c      	ldr	r2, [pc, #304]	; (8003314 <prvAddNewTaskToReadyList+0x150>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e8:	4b49      	ldr	r3, [pc, #292]	; (8003310 <prvAddNewTaskToReadyList+0x14c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d110      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031f0:	f000 fd96 	bl	8003d20 <prvInitialiseTaskLists>
 80031f4:	e00d      	b.n	8003212 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031f6:	4b48      	ldr	r3, [pc, #288]	; (8003318 <prvAddNewTaskToReadyList+0x154>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <prvAddNewTaskToReadyList+0x150>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d802      	bhi.n	8003212 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800320c:	4a41      	ldr	r2, [pc, #260]	; (8003314 <prvAddNewTaskToReadyList+0x150>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003212:	4b42      	ldr	r3, [pc, #264]	; (800331c <prvAddNewTaskToReadyList+0x158>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	4a40      	ldr	r2, [pc, #256]	; (800331c <prvAddNewTaskToReadyList+0x158>)
 800321a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800321c:	4b3f      	ldr	r3, [pc, #252]	; (800331c <prvAddNewTaskToReadyList+0x158>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <prvAddNewTaskToReadyList+0x94>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f003 f979 	bl	8006524 <SEGGER_SYSVIEW_OnTaskCreate>
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	461d      	mov	r5, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461c      	mov	r4, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	1ae3      	subs	r3, r4, r3
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	462b      	mov	r3, r5
 8003254:	f001 fdf6 	bl	8004e44 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f003 f9e6 	bl	800662c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <prvAddNewTaskToReadyList+0x15c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <prvAddNewTaskToReadyList+0x15c>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	492b      	ldr	r1, [pc, #172]	; (8003324 <prvAddNewTaskToReadyList+0x160>)
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3304      	adds	r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	3204      	adds	r2, #4
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <prvAddNewTaskToReadyList+0x160>)
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	615a      	str	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	4918      	ldr	r1, [pc, #96]	; (8003324 <prvAddNewTaskToReadyList+0x160>)
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	4814      	ldr	r0, [pc, #80]	; (8003324 <prvAddNewTaskToReadyList+0x160>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4403      	add	r3, r0
 80032dc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032de:	f001 fa3b 	bl	8004758 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <prvAddNewTaskToReadyList+0x154>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <prvAddNewTaskToReadyList+0x150>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d207      	bcs.n	8003308 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <prvAddNewTaskToReadyList+0x164>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bdb0      	pop	{r4, r5, r7, pc}
 8003310:	20000234 	.word	0x20000234
 8003314:	2000015c 	.word	0x2000015c
 8003318:	20000240 	.word	0x20000240
 800331c:	20000250 	.word	0x20000250
 8003320:	2000023c 	.word	0x2000023c
 8003324:	20000160 	.word	0x20000160
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <vTaskStartScheduler+0xa4>)
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	2300      	movs	r3, #0
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	2282      	movs	r2, #130	; 0x82
 800333e:	4925      	ldr	r1, [pc, #148]	; (80033d4 <vTaskStartScheduler+0xa8>)
 8003340:	4825      	ldr	r0, [pc, #148]	; (80033d8 <vTaskStartScheduler+0xac>)
 8003342:	f7ff fe6b 	bl	800301c <xTaskCreate>
 8003346:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d102      	bne.n	8003354 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800334e:	f000 fe1f 	bl	8003f90 <xTimerCreateTimerTask>
 8003352:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d124      	bne.n	80033a4 <vTaskStartScheduler+0x78>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60bb      	str	r3, [r7, #8]
    }
 800336c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <vTaskStartScheduler+0xb0>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <vTaskStartScheduler+0xb4>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <vTaskStartScheduler+0xb8>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <vTaskStartScheduler+0xbc>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <vTaskStartScheduler+0xa4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d102      	bne.n	8003394 <vTaskStartScheduler+0x68>
 800338e:	f003 f8ad 	bl	80064ec <SEGGER_SYSVIEW_OnIdle>
 8003392:	e004      	b.n	800339e <vTaskStartScheduler+0x72>
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <vTaskStartScheduler+0xbc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 f905 	bl	80065a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800339e:	f001 f909 	bl	80045b4 <xPortStartScheduler>
 80033a2:	e00e      	b.n	80033c2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d10a      	bne.n	80033c2 <vTaskStartScheduler+0x96>
        __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	607b      	str	r3, [r7, #4]
    }
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <vTaskStartScheduler+0xc0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000258 	.word	0x20000258
 80033d4:	08007328 	.word	0x08007328
 80033d8:	08003cf1 	.word	0x08003cf1
 80033dc:	20000254 	.word	0x20000254
 80033e0:	20000240 	.word	0x20000240
 80033e4:	20000238 	.word	0x20000238
 80033e8:	2000015c 	.word	0x2000015c
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <vTaskSuspendAll+0x18>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a03      	ldr	r2, [pc, #12]	; (8003408 <vTaskSuspendAll+0x18>)
 80033fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	2000025c 	.word	0x2000025c

0800340c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800341a:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <xTaskResumeAll+0x1dc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <xTaskResumeAll+0x2c>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003438:	f001 f95e 	bl	80046f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800343c:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <xTaskResumeAll+0x1dc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <xTaskResumeAll+0x1dc>)
 8003444:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <xTaskResumeAll+0x1dc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 80c4 	bne.w	80035d8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <xTaskResumeAll+0x1e0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80bf 	beq.w	80035d8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345a:	e08e      	b.n	800357a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345c:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <xTaskResumeAll+0x1e4>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	6a12      	ldr	r2, [r2, #32]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	69d2      	ldr	r2, [r2, #28]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3318      	adds	r3, #24
 8003486:	429a      	cmp	r2, r3
 8003488:	d103      	bne.n	8003492 <xTaskResumeAll+0x86>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2200      	movs	r2, #0
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	68d2      	ldr	r2, [r2, #12]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3304      	adds	r3, #4
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d103      	bne.n	80034d0 <xTaskResumeAll+0xc4>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 f8a2 	bl	800662c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <xTaskResumeAll+0x1e8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <xTaskResumeAll+0x1e8>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	493e      	ldr	r1, [pc, #248]	; (80035f8 <xTaskResumeAll+0x1ec>)
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3304      	adds	r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	3204      	adds	r2, #4
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <xTaskResumeAll+0x1ec>)
 800353e:	441a      	add	r2, r3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	615a      	str	r2, [r3, #20]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	492b      	ldr	r1, [pc, #172]	; (80035f8 <xTaskResumeAll+0x1ec>)
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	4827      	ldr	r0, [pc, #156]	; (80035f8 <xTaskResumeAll+0x1ec>)
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4403      	add	r3, r0
 8003564:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <xTaskResumeAll+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <xTaskResumeAll+0x1f4>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <xTaskResumeAll+0x1e4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f47f af6c 	bne.w	800345c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800358a:	f000 fc47 	bl	8003e1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <xTaskResumeAll+0x1f8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800359a:	f000 f859 	bl	8003650 <xTaskIncrementTick>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <xTaskResumeAll+0x1f4>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f1      	bne.n	800359a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <xTaskResumeAll+0x1f8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xTaskResumeAll+0x1f4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <xTaskResumeAll+0x1fc>)
 80035ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80035d8:	f001 f8be 	bl	8004758 <vPortExitCritical>

    return xAlreadyYielded;
 80035dc:	69bb      	ldr	r3, [r7, #24]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000025c 	.word	0x2000025c
 80035ec:	20000234 	.word	0x20000234
 80035f0:	200001f4 	.word	0x200001f4
 80035f4:	2000023c 	.word	0x2000023c
 80035f8:	20000160 	.word	0x20000160
 80035fc:	2000015c 	.word	0x2000015c
 8003600:	20000248 	.word	0x20000248
 8003604:	20000244 	.word	0x20000244
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <xTaskGetTickCount+0x1c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003618:	687b      	ldr	r3, [r7, #4]
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000238 	.word	0x20000238

0800362c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003632:	f001 f94b 	bl	80048cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <xTaskGetTickCountFromISR+0x20>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003640:	683b      	ldr	r3, [r7, #0]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000238 	.word	0x20000238

08003650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <xTaskIncrementTick+0x208>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 80f0 	bne.w	8003844 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003664:	4b7d      	ldr	r3, [pc, #500]	; (800385c <xTaskIncrementTick+0x20c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800366c:	4a7b      	ldr	r2, [pc, #492]	; (800385c <xTaskIncrementTick+0x20c>)
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d120      	bne.n	80036ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003678:	4b79      	ldr	r3, [pc, #484]	; (8003860 <xTaskIncrementTick+0x210>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <xTaskIncrementTick+0x48>
        __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	607b      	str	r3, [r7, #4]
    }
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xTaskIncrementTick+0x46>
 8003698:	4b71      	ldr	r3, [pc, #452]	; (8003860 <xTaskIncrementTick+0x210>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	4b71      	ldr	r3, [pc, #452]	; (8003864 <xTaskIncrementTick+0x214>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <xTaskIncrementTick+0x210>)
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4a6f      	ldr	r2, [pc, #444]	; (8003864 <xTaskIncrementTick+0x214>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <xTaskIncrementTick+0x218>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	4a6d      	ldr	r2, [pc, #436]	; (8003868 <xTaskIncrementTick+0x218>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	f000 fbb1 	bl	8003e1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <xTaskIncrementTick+0x21c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	f0c0 80aa 	bcc.w	800381a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c6:	4b66      	ldr	r3, [pc, #408]	; (8003860 <xTaskIncrementTick+0x210>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <xTaskIncrementTick+0x21c>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	601a      	str	r2, [r3, #0]
                    break;
 80036d8:	e09f      	b.n	800381a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <xTaskIncrementTick+0x210>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80036ea:	6a3a      	ldr	r2, [r7, #32]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d203      	bcs.n	80036fa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036f2:	4a5e      	ldr	r2, [pc, #376]	; (800386c <xTaskIncrementTick+0x21c>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80036f8:	e08f      	b.n	800381a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3304      	adds	r3, #4
 800371c:	429a      	cmp	r2, r3
 800371e:	d103      	bne.n	8003728 <xTaskIncrementTick+0xd8>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2200      	movs	r2, #0
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1e5a      	subs	r2, r3, #1
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01e      	beq.n	800377e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	6a12      	ldr	r2, [r2, #32]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	69d2      	ldr	r2, [r2, #28]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3318      	adds	r3, #24
 8003762:	429a      	cmp	r2, r3
 8003764:	d103      	bne.n	800376e <xTaskIncrementTick+0x11e>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4618      	mov	r0, r3
 8003782:	f002 ff53 	bl	800662c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	2201      	movs	r2, #1
 800378c:	409a      	lsls	r2, r3
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <xTaskIncrementTick+0x220>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	4a36      	ldr	r2, [pc, #216]	; (8003870 <xTaskIncrementTick+0x220>)
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4935      	ldr	r1, [pc, #212]	; (8003874 <xTaskIncrementTick+0x224>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3304      	adds	r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	3204      	adds	r2, #4
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1d1a      	adds	r2, r3, #4
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a26      	ldr	r2, [pc, #152]	; (8003874 <xTaskIncrementTick+0x224>)
 80037dc:	441a      	add	r2, r3
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	615a      	str	r2, [r3, #20]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4923      	ldr	r1, [pc, #140]	; (8003874 <xTaskIncrementTick+0x224>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	481f      	ldr	r0, [pc, #124]	; (8003874 <xTaskIncrementTick+0x224>)
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4403      	add	r3, r0
 8003802:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <xTaskIncrementTick+0x228>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	429a      	cmp	r2, r3
 8003810:	f67f af59 	bls.w	80036c6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003818:	e755      	b.n	80036c6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskIncrementTick+0x228>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4914      	ldr	r1, [pc, #80]	; (8003874 <xTaskIncrementTick+0x224>)
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d901      	bls.n	8003836 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <xTaskIncrementTick+0x22c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800383e:	2301      	movs	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e004      	b.n	800384e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <xTaskIncrementTick+0x230>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <xTaskIncrementTick+0x230>)
 800384c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	2000025c 	.word	0x2000025c
 800385c:	20000238 	.word	0x20000238
 8003860:	200001ec 	.word	0x200001ec
 8003864:	200001f0 	.word	0x200001f0
 8003868:	2000024c 	.word	0x2000024c
 800386c:	20000254 	.word	0x20000254
 8003870:	2000023c 	.word	0x2000023c
 8003874:	20000160 	.word	0x20000160
 8003878:	2000015c 	.word	0x2000015c
 800387c:	20000248 	.word	0x20000248
 8003880:	20000244 	.word	0x20000244

08003884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <vTaskSwitchContext+0xbc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <vTaskSwitchContext+0xc0>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003898:	e04d      	b.n	8003936 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <vTaskSwitchContext+0xc0>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <vTaskSwitchContext+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	fab3 f383 	clz	r3, r3
 80038ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	f1c3 031f 	rsb	r3, r3, #31
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <vTaskSwitchContext+0xc8>)
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	607b      	str	r3, [r7, #4]
    }
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <vTaskSwitchContext+0x5a>
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <vTaskSwitchContext+0xc8>)
 80038ec:	4413      	add	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3308      	adds	r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d104      	bne.n	8003910 <vTaskSwitchContext+0x8c>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <vTaskSwitchContext+0xcc>)
 8003918:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <vTaskSwitchContext+0xcc>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <vTaskSwitchContext+0xd0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d102      	bne.n	800392c <vTaskSwitchContext+0xa8>
 8003926:	f002 fde1 	bl	80064ec <SEGGER_SYSVIEW_OnIdle>
}
 800392a:	e004      	b.n	8003936 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <vTaskSwitchContext+0xcc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f002 fe39 	bl	80065a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000025c 	.word	0x2000025c
 8003944:	20000248 	.word	0x20000248
 8003948:	2000023c 	.word	0x2000023c
 800394c:	20000160 	.word	0x20000160
 8003950:	2000015c 	.word	0x2000015c
 8003954:	20000258 	.word	0x20000258

08003958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60fb      	str	r3, [r7, #12]
    }
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <vTaskPlaceOnEventList+0x44>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3318      	adds	r3, #24
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe ffb5 	bl	80028f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800398c:	2101      	movs	r1, #1
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	f000 fa7e 	bl	8003e90 <prvAddCurrentTaskToDelayedList>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000015c 	.word	0x2000015c

080039a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	613b      	str	r3, [r7, #16]
    }
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <vTaskPlaceOnEventListRestricted+0x8c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <vTaskPlaceOnEventListRestricted+0x8c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	621a      	str	r2, [r3, #32]
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <vTaskPlaceOnEventListRestricted+0x8c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	3218      	adds	r2, #24
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <vTaskPlaceOnEventListRestricted+0x8c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f103 0218 	add.w	r2, r3, #24
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <vTaskPlaceOnEventListRestricted+0x8c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a16:	2024      	movs	r0, #36	; 0x24
 8003a18:	f002 f86a 	bl	8005af0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	68b8      	ldr	r0, [r7, #8]
 8003a20:	f000 fa36 	bl	8003e90 <prvAddCurrentTaskToDelayedList>
    }
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	2000015c 	.word	0x2000015c

08003a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60fb      	str	r3, [r7, #12]
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	6a12      	ldr	r2, [r2, #32]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	69d2      	ldr	r2, [r2, #28]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d103      	bne.n	8003a8a <xTaskRemoveFromEventList+0x5a>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9a:	4b4b      	ldr	r3, [pc, #300]	; (8003bc8 <xTaskRemoveFromEventList+0x198>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d162      	bne.n	8003b68 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	68d2      	ldr	r2, [r2, #12]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	6892      	ldr	r2, [r2, #8]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d103      	bne.n	8003ad0 <xTaskRemoveFromEventList+0xa0>
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 fda2 	bl	800662c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <xTaskRemoveFromEventList+0x19c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <xTaskRemoveFromEventList+0x19c>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4934      	ldr	r1, [pc, #208]	; (8003bd0 <xTaskRemoveFromEventList+0x1a0>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	3204      	adds	r2, #4
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	1d1a      	adds	r2, r3, #4
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <xTaskRemoveFromEventList+0x1a0>)
 8003b3e:	441a      	add	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	615a      	str	r2, [r3, #20]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4921      	ldr	r1, [pc, #132]	; (8003bd0 <xTaskRemoveFromEventList+0x1a0>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	481d      	ldr	r0, [pc, #116]	; (8003bd0 <xTaskRemoveFromEventList+0x1a0>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4403      	add	r3, r0
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	e01b      	b.n	8003ba0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <xTaskRemoveFromEventList+0x1a4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	61da      	str	r2, [r3, #28]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	3218      	adds	r2, #24
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f103 0218 	add.w	r2, r3, #24
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <xTaskRemoveFromEventList+0x1a4>)
 8003b94:	629a      	str	r2, [r3, #40]	; 0x28
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <xTaskRemoveFromEventList+0x1a4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <xTaskRemoveFromEventList+0x1a4>)
 8003b9e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <xTaskRemoveFromEventList+0x1a8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d905      	bls.n	8003bba <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <xTaskRemoveFromEventList+0x1ac>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e001      	b.n	8003bbe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2000025c 	.word	0x2000025c
 8003bcc:	2000023c 	.word	0x2000023c
 8003bd0:	20000160 	.word	0x20000160
 8003bd4:	200001f4 	.word	0x200001f4
 8003bd8:	2000015c 	.word	0x2000015c
 8003bdc:	20000248 	.word	0x20000248

08003be0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <vTaskInternalSetTimeOutState+0x24>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <vTaskInternalSetTimeOutState+0x28>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	2000024c 	.word	0x2000024c
 8003c08:	20000238 	.word	0x20000238

08003c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	613b      	str	r3, [r7, #16]
    }
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
    }
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003c4e:	f000 fd53 	bl	80046f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <xTaskCheckForTimeOut+0xc4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d102      	bne.n	8003c72 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e026      	b.n	8003cc0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <xTaskCheckForTimeOut+0xc8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d00a      	beq.n	8003c94 <xTaskCheckForTimeOut+0x88>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d305      	bcc.n	8003c94 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e015      	b.n	8003cc0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d20b      	bcs.n	8003cb6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1ad2      	subs	r2, r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff98 	bl	8003be0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e004      	b.n	8003cc0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003cc0:	f000 fd4a 	bl	8004758 <vPortExitCritical>

    return xReturn;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000238 	.word	0x20000238
 8003cd4:	2000024c 	.word	0x2000024c

08003cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <vTaskMissedYield+0x14>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	20000248 	.word	0x20000248

08003cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003cf8:	f000 f852 	bl	8003da0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <prvIdleTask+0x28>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d9f9      	bls.n	8003cf8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <prvIdleTask+0x2c>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d14:	e7f0      	b.n	8003cf8 <prvIdleTask+0x8>
 8003d16:	bf00      	nop
 8003d18:	20000160 	.word	0x20000160
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e00c      	b.n	8003d46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <prvInitialiseTaskLists+0x60>)
 8003d38:	4413      	add	r3, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fdae 	bl	800289c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3301      	adds	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d9ef      	bls.n	8003d2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d4c:	480d      	ldr	r0, [pc, #52]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d4e:	f7fe fda5 	bl	800289c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d52:	480d      	ldr	r0, [pc, #52]	; (8003d88 <prvInitialiseTaskLists+0x68>)
 8003d54:	f7fe fda2 	bl	800289c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d58:	480c      	ldr	r0, [pc, #48]	; (8003d8c <prvInitialiseTaskLists+0x6c>)
 8003d5a:	f7fe fd9f 	bl	800289c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003d5e:	480c      	ldr	r0, [pc, #48]	; (8003d90 <prvInitialiseTaskLists+0x70>)
 8003d60:	f7fe fd9c 	bl	800289c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003d64:	480b      	ldr	r0, [pc, #44]	; (8003d94 <prvInitialiseTaskLists+0x74>)
 8003d66:	f7fe fd99 	bl	800289c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvInitialiseTaskLists+0x78>)
 8003d6c:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <prvInitialiseTaskLists+0x7c>)
 8003d72:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <prvInitialiseTaskLists+0x68>)
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000160 	.word	0x20000160
 8003d84:	200001c4 	.word	0x200001c4
 8003d88:	200001d8 	.word	0x200001d8
 8003d8c:	200001f4 	.word	0x200001f4
 8003d90:	20000208 	.word	0x20000208
 8003d94:	20000220 	.word	0x20000220
 8003d98:	200001ec 	.word	0x200001ec
 8003d9c:	200001f0 	.word	0x200001f0

08003da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003da6:	e019      	b.n	8003ddc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003da8:	f000 fca6 	bl	80046f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <prvCheckTasksWaitingTermination+0x50>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fdd5 	bl	8002968 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <prvCheckTasksWaitingTermination+0x54>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <prvCheckTasksWaitingTermination+0x54>)
 8003dc6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dd0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003dd2:	f000 fcc1 	bl	8004758 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f810 	bl	8003dfc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e1      	bne.n	8003da8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000208 	.word	0x20000208
 8003df4:	20000234 	.word	0x20000234
 8003df8:	2000021c 	.word	0x2000021c

08003dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fe59 	bl	8004ac0 <vPortFree>
            vPortFree( pxTCB );
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fe56 	bl	8004ac0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <prvResetNextTaskUnblockTime+0x30>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <prvResetNextTaskUnblockTime+0x34>)
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e32:	e005      	b.n	8003e40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <prvResetNextTaskUnblockTime+0x30>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <prvResetNextTaskUnblockTime+0x34>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	200001ec 	.word	0x200001ec
 8003e50:	20000254 	.word	0x20000254

08003e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <xTaskGetSchedulerState+0x34>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e62:	2301      	movs	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	e008      	b.n	8003e7a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <xTaskGetSchedulerState+0x38>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003e70:	2302      	movs	r3, #2
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	e001      	b.n	8003e7a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003e7a:	687b      	ldr	r3, [r7, #4]
    }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000240 	.word	0x20000240
 8003e8c:	2000025c 	.word	0x2000025c

08003e90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fd5e 	bl	8002968 <uxListRemove>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	2201      	movs	r2, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ec8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d124      	bne.n	8003f1c <prvAddCurrentTaskToDelayedList+0x8c>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d021      	beq.n	8003f1c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	60da      	str	r2, [r3, #12]
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	3204      	adds	r2, #4
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f0c:	615a      	str	r2, [r3, #20]
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f1a:	e026      	b.n	8003f6a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d209      	bcs.n	8003f48 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe fcd8 	bl	80028f6 <vListInsert>
}
 8003f46:	e010      	b.n	8003f6a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe fcce 	bl	80028f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d202      	bcs.n	8003f6a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000238 	.word	0x20000238
 8003f78:	2000015c 	.word	0x2000015c
 8003f7c:	2000023c 	.word	0x2000023c
 8003f80:	20000220 	.word	0x20000220
 8003f84:	200001f0 	.word	0x200001f0
 8003f88:	200001ec 	.word	0x200001ec
 8003f8c:	20000254 	.word	0x20000254

08003f90 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f9a:	f000 fa47 	bl	800442c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <xTimerCreateTimerTask+0x54>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <xTimerCreateTimerTask+0x58>)
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	2302      	movs	r3, #2
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fb4:	490d      	ldr	r1, [pc, #52]	; (8003fec <xTimerCreateTimerTask+0x5c>)
 8003fb6:	480e      	ldr	r0, [pc, #56]	; (8003ff0 <xTimerCreateTimerTask+0x60>)
 8003fb8:	f7ff f830 	bl	800301c <xTaskCreate>
 8003fbc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	603b      	str	r3, [r7, #0]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fda:	687b      	ldr	r3, [r7, #4]
    }
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000290 	.word	0x20000290
 8003fe8:	20000294 	.word	0x20000294
 8003fec:	08007330 	.word	0x08007330
 8003ff0:	08004099 	.word	0x08004099

08003ff4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004000:	e008      	b.n	8004014 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	4413      	add	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	18d1      	adds	r1, r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f8dd 	bl	80041e0 <prvInsertTimerInActiveList>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ea      	bne.n	8004002 <prvReloadTimer+0xe>
        }
    }
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <prvProcessExpiredTimer+0x5c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fc89 	bl	8002968 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ffc3 	bl	8003ff4 <prvReloadTimer>
 800406e:	e008      	b.n	8004082 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	4798      	blx	r3
    }
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000288 	.word	0x20000288

08004098 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f857 	bl	8004158 <prvGetNextExpireTime>
 80040aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4619      	mov	r1, r3
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f803 	bl	80040bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040b6:	f000 f8d5 	bl	8004264 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ba:	e7f1      	b.n	80040a0 <prvTimerTask+0x8>

080040bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040c6:	f7ff f993 	bl	80033f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f866 	bl	80041a0 <prvSampleTimeNow>
 80040d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d130      	bne.n	800413e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <prvProcessTimerOrBlockTask+0x3c>
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d806      	bhi.n	80040f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040ea:	f7ff f98f 	bl	800340c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ffa1 	bl	8004038 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040f6:	e024      	b.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <prvProcessTimerOrBlockTask+0x90>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <prvProcessTimerOrBlockTask+0x50>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <prvProcessTimerOrBlockTask+0x52>
 800410c:	2300      	movs	r3, #0
 800410e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <prvProcessTimerOrBlockTask+0x94>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	f7fe ff49 	bl	8002fb4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004122:	f7ff f973 	bl	800340c <xTaskResumeAll>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <prvProcessTimerOrBlockTask+0x98>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
    }
 800413c:	e001      	b.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800413e:	f7ff f965 	bl	800340c <xTaskResumeAll>
    }
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	2000028c 	.word	0x2000028c
 8004150:	20000290 	.word	0x20000290
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <prvGetNextExpireTime+0x44>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <prvGetNextExpireTime+0x16>
 800416a:	2201      	movs	r2, #1
 800416c:	e000      	b.n	8004170 <prvGetNextExpireTime+0x18>
 800416e:	2200      	movs	r2, #0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <prvGetNextExpireTime+0x44>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e001      	b.n	800418c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800418c:	68fb      	ldr	r3, [r7, #12]
    }
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000288 	.word	0x20000288

080041a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041a8:	f7ff fa30 	bl	800360c <xTaskGetTickCount>
 80041ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <prvSampleTimeNow+0x3c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d205      	bcs.n	80041c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041b8:	f000 f912 	bl	80043e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e002      	b.n	80041ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <prvSampleTimeNow+0x3c>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041d0:	68fb      	ldr	r3, [r7, #12]
    }
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000298 	.word	0x20000298

080041e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d812      	bhi.n	800422c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e01b      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <prvInsertTimerInActiveList+0x7c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fb66 	bl	80028f6 <vListInsert>
 800422a:	e012      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d206      	bcs.n	8004242 <prvInsertTimerInActiveList+0x62>
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e007      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <prvInsertTimerInActiveList+0x80>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe fb52 	bl	80028f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004252:	697b      	ldr	r3, [r7, #20]
    }
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2000028c 	.word	0x2000028c
 8004260:	20000288 	.word	0x20000288

08004264 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800426a:	e0a6      	b.n	80043ba <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f2c0 80a3 	blt.w	80043ba <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fb6f 	bl	8002968 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff87 	bl	80041a0 <prvSampleTimeNow>
 8004292:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3b01      	subs	r3, #1
 8004298:	2b08      	cmp	r3, #8
 800429a:	f200 808d 	bhi.w	80043b8 <prvProcessReceivedCommands+0x154>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <prvProcessReceivedCommands+0x40>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	08004331 	.word	0x08004331
 80042b0:	08004345 	.word	0x08004345
 80042b4:	0800438f 	.word	0x0800438f
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042c9 	.word	0x080042c9
 80042c0:	08004331 	.word	0x08004331
 80042c4:	08004345 	.word	0x08004345
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	18d1      	adds	r1, r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	69f8      	ldr	r0, [r7, #28]
 80042e8:	f7ff ff7a 	bl	80041e0 <prvInsertTimerInActiveList>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	4413      	add	r3, r2
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4619      	mov	r1, r3
 800430c:	69f8      	ldr	r0, [r7, #28]
 800430e:	f7ff fe71 	bl	8003ff4 <prvReloadTimer>
 8004312:	e008      	b.n	8004326 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	69f8      	ldr	r0, [r7, #28]
 800432c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800432e:	e044      	b.n	80043ba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004342:	e03a      	b.n	80043ba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	617b      	str	r3, [r7, #20]
    }
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	18d1      	adds	r1, r2, r3
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	69f8      	ldr	r0, [r7, #28]
 8004388:	f7ff ff2a 	bl	80041e0 <prvInsertTimerInActiveList>
                        break;
 800438c:	e015      	b.n	80043ba <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d103      	bne.n	80043a4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800439c:	69f8      	ldr	r0, [r7, #28]
 800439e:	f000 fb8f 	bl	8004ac0 <vPortFree>
 80043a2:	e00a      	b.n	80043ba <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043b6:	e000      	b.n	80043ba <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80043b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <prvProcessReceivedCommands+0x178>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f107 0108 	add.w	r1, r7, #8
 80043c2:	2200      	movs	r2, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fc01 	bl	8002bcc <xQueueReceive>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f47f af4d 	bne.w	800426c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000290 	.word	0x20000290

080043e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043e6:	e009      	b.n	80043fc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <prvSwitchTimerLists+0x44>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043f2:	f04f 31ff 	mov.w	r1, #4294967295
 80043f6:	6838      	ldr	r0, [r7, #0]
 80043f8:	f7ff fe1e 	bl	8004038 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <prvSwitchTimerLists+0x44>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <prvSwitchTimerLists+0x44>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <prvSwitchTimerLists+0x48>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <prvSwitchTimerLists+0x44>)
 8004412:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <prvSwitchTimerLists+0x48>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6013      	str	r3, [r2, #0]
    }
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000288 	.word	0x20000288
 8004428:	2000028c 	.word	0x2000028c

0800442c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004430:	f000 f962 	bl	80046f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <prvCheckForValidListAndQueue+0x54>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11d      	bne.n	8004478 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800443c:	4811      	ldr	r0, [pc, #68]	; (8004484 <prvCheckForValidListAndQueue+0x58>)
 800443e:	f7fe fa2d 	bl	800289c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004442:	4811      	ldr	r0, [pc, #68]	; (8004488 <prvCheckForValidListAndQueue+0x5c>)
 8004444:	f7fe fa2a 	bl	800289c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <prvCheckForValidListAndQueue+0x60>)
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <prvCheckForValidListAndQueue+0x58>)
 800444c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <prvCheckForValidListAndQueue+0x64>)
 8004450:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <prvCheckForValidListAndQueue+0x5c>)
 8004452:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004454:	2200      	movs	r2, #0
 8004456:	210c      	movs	r1, #12
 8004458:	200a      	movs	r0, #10
 800445a:	f7fe fb3f 	bl	8002adc <xQueueGenericCreate>
 800445e:	4603      	mov	r3, r0
 8004460:	4a07      	ldr	r2, [pc, #28]	; (8004480 <prvCheckForValidListAndQueue+0x54>)
 8004462:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <prvCheckForValidListAndQueue+0x54>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <prvCheckForValidListAndQueue+0x54>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4908      	ldr	r1, [pc, #32]	; (8004494 <prvCheckForValidListAndQueue+0x68>)
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fd48 	bl	8002f08 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004478:	f000 f96e 	bl	8004758 <vPortExitCritical>
    }
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000290 	.word	0x20000290
 8004484:	20000260 	.word	0x20000260
 8004488:	20000274 	.word	0x20000274
 800448c:	20000288 	.word	0x20000288
 8004490:	2000028c 	.word	0x2000028c
 8004494:	08007338 	.word	0x08007338

08004498 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3b04      	subs	r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b04      	subs	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b04      	subs	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <pxPortInitialiseStack+0x64>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b14      	subs	r3, #20
 80044d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b04      	subs	r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f06f 0202 	mvn.w	r2, #2
 80044e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3b20      	subs	r3, #32
 80044ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	08004501 	.word	0x08004501

08004500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <prvTaskExitError+0x54>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d00a      	beq.n	800452a <prvTaskExitError+0x2a>
        __asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60fb      	str	r3, [r7, #12]
    }
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <prvTaskExitError+0x28>
        __asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
    }
 800453c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800453e:	bf00      	nop
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0fc      	beq.n	8004540 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000010 	.word	0x20000010
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	2000015c 	.word	0x2000015c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
 80045aa:	0000      	.short	0x0000
 80045ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop

080045b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <xPortStartScheduler+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a46      	ldr	r2, [pc, #280]	; (80046d8 <xPortStartScheduler+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10a      	bne.n	80045da <xPortStartScheduler+0x26>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	613b      	str	r3, [r7, #16]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045da:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <xPortStartScheduler+0x120>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a3f      	ldr	r2, [pc, #252]	; (80046dc <xPortStartScheduler+0x128>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10a      	bne.n	80045fa <xPortStartScheduler+0x46>
        __asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
    }
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <xPortStartScheduler+0x12c>)
 80045fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	22ff      	movs	r2, #255	; 0xff
 800460a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <xPortStartScheduler+0x130>)
 8004620:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <xPortStartScheduler+0x134>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004628:	e009      	b.n	800463e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <xPortStartScheduler+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <xPortStartScheduler+0x134>)
 8004632:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d0ef      	beq.n	800462a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <xPortStartScheduler+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00a      	beq.n	800466c <xPortStartScheduler+0xb8>
        __asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60bb      	str	r3, [r7, #8]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800466c:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <xPortStartScheduler+0x134>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <xPortStartScheduler+0x134>)
 8004674:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xPortStartScheduler+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <xPortStartScheduler+0x134>)
 8004680:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <xPortStartScheduler+0x138>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <xPortStartScheduler+0x138>)
 8004690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004694:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <xPortStartScheduler+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <xPortStartScheduler+0x138>)
 800469c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046a2:	f000 f8e3 	bl	800486c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <xPortStartScheduler+0x13c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046ac:	f000 f902 	bl	80048b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <xPortStartScheduler+0x140>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <xPortStartScheduler+0x140>)
 80046b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046bc:	f7ff ff64 	bl	8004588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046c0:	f7ff f8e0 	bl	8003884 <vTaskSwitchContext>
    prvTaskExitError();
 80046c4:	f7ff ff1c 	bl	8004500 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	410fc271 	.word	0x410fc271
 80046dc:	410fc270 	.word	0x410fc270
 80046e0:	e000e400 	.word	0xe000e400
 80046e4:	2000029c 	.word	0x2000029c
 80046e8:	200002a0 	.word	0x200002a0
 80046ec:	e000ed20 	.word	0xe000ed20
 80046f0:	20000010 	.word	0x20000010
 80046f4:	e000ef34 	.word	0xe000ef34

080046f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
        __asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
    }
 8004710:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <vPortEnterCritical+0x58>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <vPortEnterCritical+0x58>)
 800471a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <vPortEnterCritical+0x58>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10f      	bne.n	8004744 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <vPortEnterCritical+0x5c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <vPortEnterCritical+0x4c>
        __asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
    }
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <vPortEnterCritical+0x4a>
    }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20000010 	.word	0x20000010
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <vPortExitCritical+0x50>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <vPortExitCritical+0x24>
        __asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	607b      	str	r3, [r7, #4]
    }
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <vPortExitCritical+0x50>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3b01      	subs	r3, #1
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <vPortExitCritical+0x50>)
 8004784:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <vPortExitCritical+0x50>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <vPortExitCritical+0x42>
 800478e:	2300      	movs	r3, #0
 8004790:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004798:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000010 	.word	0x20000010
 80047ac:	00000000 	.word	0x00000000

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7ff f850 	bl	8003884 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	2000015c 	.word	0x2000015c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
        __asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
    }
 8004830:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004832:	f001 fde1 	bl	80063f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7fe ff0b 	bl	8003650 <xTaskIncrementTick>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004840:	f001 fe38 	bl	80064b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <SysTick_Handler+0x50>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800484e:	f001 fe15 	bl	800647c <SEGGER_SYSVIEW_RecordExitISR>
 8004852:	2300      	movs	r3, #0
 8004854:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f383 8811 	msr	BASEPRI, r3
    }
 800485c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <vPortSetupTimerInterrupt+0x38>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <vPortSetupTimerInterrupt+0x40>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <vPortSetupTimerInterrupt+0x44>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010
 80048a4:	e000e018 	.word	0xe000e018
 80048a8:	20000000 	.word	0x20000000
 80048ac:	10624dd3 	.word	0x10624dd3
 80048b0:	e000e014 	.word	0xe000e014

080048b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048c4 <vPortEnableVFP+0x10>
 80048b8:	6801      	ldr	r1, [r0, #0]
 80048ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048be:	6001      	str	r1, [r0, #0]
 80048c0:	4770      	bx	lr
 80048c2:	0000      	.short	0x0000
 80048c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop

080048cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048d2:	f3ef 8305 	mrs	r3, IPSR
 80048d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d914      	bls.n	8004908 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048de:	4a17      	ldr	r2, [pc, #92]	; (800493c <vPortValidateInterruptPriority+0x70>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <vPortValidateInterruptPriority+0x74>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	7afa      	ldrb	r2, [r7, #11]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d20a      	bcs.n	8004908 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
    }
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <vPortValidateInterruptPriority+0x78>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <vPortValidateInterruptPriority+0x7c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d90a      	bls.n	800492e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	603b      	str	r3, [r7, #0]
    }
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <vPortValidateInterruptPriority+0x60>
    }
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e3f0 	.word	0xe000e3f0
 8004940:	2000029c 	.word	0x2000029c
 8004944:	e000ed0c 	.word	0xe000ed0c
 8004948:	200002a0 	.word	0x200002a0

0800494c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004958:	f7fe fd4a 	bl	80033f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <pvPortMalloc+0x160>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004964:	f000 f908 	bl	8004b78 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d012      	beq.n	8004994 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800496e:	2208      	movs	r2, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	3308      	adds	r3, #8
 800497a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d804      	bhi.n	8004990 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	e001      	b.n	8004994 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db70      	blt.n	8004a7c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d06d      	beq.n	8004a7c <pvPortMalloc+0x130>
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <pvPortMalloc+0x164>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d868      	bhi.n	8004a7c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049aa:	4b42      	ldr	r3, [pc, #264]	; (8004ab4 <pvPortMalloc+0x168>)
 80049ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <pvPortMalloc+0x168>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b4:	e004      	b.n	80049c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <pvPortMalloc+0x86>
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f1      	bne.n	80049b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <pvPortMalloc+0x160>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	429a      	cmp	r2, r3
 80049da:	d04f      	beq.n	8004a7c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2208      	movs	r2, #8
 80049e2:	4413      	add	r3, r2
 80049e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	2308      	movs	r3, #8
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d91f      	bls.n	8004a3e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <pvPortMalloc+0xda>
        __asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
    }
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f000 f8f9 	bl	8004c30 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <pvPortMalloc+0x164>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <pvPortMalloc+0x164>)
 8004a4a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <pvPortMalloc+0x164>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <pvPortMalloc+0x16c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d203      	bcs.n	8004a60 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a58:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <pvPortMalloc+0x164>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <pvPortMalloc+0x16c>)
 8004a5e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <pvPortMalloc+0x170>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a10      	ldr	r2, [pc, #64]	; (8004abc <pvPortMalloc+0x170>)
 8004a7a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a7c:	f7fe fcc6 	bl	800340c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <pvPortMalloc+0x154>
        __asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
    }
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <pvPortMalloc+0x152>
    return pvReturn;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20012eac 	.word	0x20012eac
 8004ab0:	20012eb0 	.word	0x20012eb0
 8004ab4:	20012ea4 	.word	0x20012ea4
 8004ab8:	20012eb4 	.word	0x20012eb4
 8004abc:	20012eb8 	.word	0x20012eb8

08004ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d049      	beq.n	8004b66 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	425b      	negs	r3, r3
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4413      	add	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <vPortFree+0x3e>
        __asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
    }
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <vPortFree+0x5c>
        __asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60bb      	str	r3, [r7, #8]
    }
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0fdb      	lsrs	r3, r3, #31
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01c      	beq.n	8004b66 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d118      	bne.n	8004b66 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b40:	f7fe fc56 	bl	80033f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <vPortFree+0xb0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <vPortFree+0xb0>)
 8004b50:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b52:	6938      	ldr	r0, [r7, #16]
 8004b54:	f000 f86c 	bl	8004c30 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <vPortFree+0xb4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <vPortFree+0xb4>)
 8004b60:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b62:	f7fe fc53 	bl	800340c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b66:	bf00      	nop
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20012eb0 	.word	0x20012eb0
 8004b74:	20012ebc 	.word	0x20012ebc

08004b78 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b7e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b82:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <prvHeapInit+0xa4>)
 8004b86:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3307      	adds	r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0307 	bic.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <prvHeapInit+0xa4>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <prvHeapInit+0xa8>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <prvHeapInit+0xa8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <prvHeapInit+0xac>)
 8004bd8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <prvHeapInit+0xac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <prvHeapInit+0xac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <prvHeapInit+0xac>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <prvHeapInit+0xb0>)
 8004c06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <prvHeapInit+0xb4>)
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	200002a4 	.word	0x200002a4
 8004c20:	20012ea4 	.word	0x20012ea4
 8004c24:	20012eac 	.word	0x20012eac
 8004c28:	20012eb4 	.word	0x20012eb4
 8004c2c:	20012eb0 	.word	0x20012eb0

08004c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <prvInsertBlockIntoFreeList+0xac>)
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e002      	b.n	8004c44 <prvInsertBlockIntoFreeList+0x14>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d8f7      	bhi.n	8004c3e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4413      	add	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d108      	bne.n	8004c72 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	441a      	add	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d118      	bne.n	8004cb8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d00d      	beq.n	8004cae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e008      	b.n	8004cc0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e003      	b.n	8004cc0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d002      	beq.n	8004cce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20012ea4 	.word	0x20012ea4
 8004ce0:	20012eac 	.word	0x20012eac

08004ce4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ce8:	4803      	ldr	r0, [pc, #12]	; (8004cf8 <_cbSendSystemDesc+0x14>)
 8004cea:	f001 fb2f 	bl	800634c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cee:	4803      	ldr	r0, [pc, #12]	; (8004cfc <_cbSendSystemDesc+0x18>)
 8004cf0:	f001 fb2c 	bl	800634c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08007340 	.word	0x08007340
 8004cfc:	0800737c 	.word	0x0800737c

08004d00 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d0a:	6819      	ldr	r1, [r3, #0]
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d0e:	4a06      	ldr	r2, [pc, #24]	; (8004d28 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d10:	f000 fe9a 	bl	8005a48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d18:	f000 feda 	bl	8005ad0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000000 	.word	0x20000000
 8004d24:	08004ce5 	.word	0x08004ce5
 8004d28:	08007418 	.word	0x08007418

08004d2c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e033      	b.n	8004da0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d38:	491e      	ldr	r1, [pc, #120]	; (8004db4 <_cbSendTaskList+0x88>)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	491a      	ldr	r1, [pc, #104]	; (8004db4 <_cbSendTaskList+0x88>)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3304      	adds	r3, #4
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	4c16      	ldr	r4, [pc, #88]	; (8004db4 <_cbSendTaskList+0x88>)
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4423      	add	r3, r4
 8004d68:	3308      	adds	r3, #8
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	4d11      	ldr	r5, [pc, #68]	; (8004db4 <_cbSendTaskList+0x88>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	442b      	add	r3, r5
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	4e0d      	ldr	r6, [pc, #52]	; (8004db4 <_cbSendTaskList+0x88>)
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4433      	add	r3, r6
 8004d8c:	3310      	adds	r3, #16
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	462b      	mov	r3, r5
 8004d94:	4622      	mov	r2, r4
 8004d96:	f000 f8bd 	bl	8004f14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <_cbSendTaskList+0x8c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3c6      	bcc.n	8004d38 <_cbSendTaskList+0xc>
  }
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db4:	20012ec0 	.word	0x20012ec0
 8004db8:	20012f60 	.word	0x20012f60

08004dbc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004dc4:	f7fe fc32 	bl	800362c <xTaskGetTickCountFromISR>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	469a      	mov	sl, r3
 8004dce:	4693      	mov	fp, r2
 8004dd0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f04f 0a00 	mov.w	sl, #0
 8004de0:	f04f 0b00 	mov.w	fp, #0
 8004de4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004de8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004dec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004df0:	4652      	mov	r2, sl
 8004df2:	465b      	mov	r3, fp
 8004df4:	1a14      	subs	r4, r2, r0
 8004df6:	eb63 0501 	sbc.w	r5, r3, r1
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	00ab      	lsls	r3, r5, #2
 8004e04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e08:	00a2      	lsls	r2, r4, #2
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	eb14 0800 	adds.w	r8, r4, r0
 8004e12:	eb45 0901 	adc.w	r9, r5, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e32:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e44 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e52:	2205      	movs	r2, #5
 8004e54:	492b      	ldr	r1, [pc, #172]	; (8004f04 <SYSVIEW_AddTask+0xc0>)
 8004e56:	68b8      	ldr	r0, [r7, #8]
 8004e58:	f001 ff72 	bl	8006d40 <memcmp>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04b      	beq.n	8004efa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b07      	cmp	r3, #7
 8004e68:	d903      	bls.n	8004e72 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e6a:	4828      	ldr	r0, [pc, #160]	; (8004f0c <SYSVIEW_AddTask+0xc8>)
 8004e6c:	f001 fd16 	bl	800689c <SEGGER_SYSVIEW_Warn>
    return;
 8004e70:	e044      	b.n	8004efc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e72:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4926      	ldr	r1, [pc, #152]	; (8004f10 <SYSVIEW_AddTask+0xcc>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4921      	ldr	r1, [pc, #132]	; (8004f10 <SYSVIEW_AddTask+0xcc>)
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3304      	adds	r3, #4
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	491b      	ldr	r1, [pc, #108]	; (8004f10 <SYSVIEW_AddTask+0xcc>)
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3308      	adds	r3, #8
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4916      	ldr	r1, [pc, #88]	; (8004f10 <SYSVIEW_AddTask+0xcc>)
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4910      	ldr	r1, [pc, #64]	; (8004f10 <SYSVIEW_AddTask+0xcc>)
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3310      	adds	r3, #16
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <SYSVIEW_AddTask+0xc4>)
 8004ee6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f80e 	bl	8004f14 <SYSVIEW_SendTaskInfo>
 8004ef8:	e000      	b.n	8004efc <SYSVIEW_AddTask+0xb8>
    return;
 8004efa:	bf00      	nop

}
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	0800738c 	.word	0x0800738c
 8004f08:	20012f60 	.word	0x20012f60
 8004f0c:	08007394 	.word	0x08007394
 8004f10:	20012ec0 	.word	0x20012ec0

08004f14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	2214      	movs	r2, #20
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 ff18 	bl	8006d60 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 f907 	bl	800615c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f4e:	bf00      	nop
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <_DoInit+0xa0>)
 8004f60:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004f62:	22a8      	movs	r2, #168	; 0xa8
 8004f64:	2100      	movs	r1, #0
 8004f66:	6838      	ldr	r0, [r7, #0]
 8004f68:	f001 fefa 	bl	8006d60 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2203      	movs	r2, #3
 8004f76:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4a20      	ldr	r2, [pc, #128]	; (8004ffc <_DoInit+0xa4>)
 8004f7c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <_DoInit+0xa8>)
 8004f82:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f8a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <_DoInit+0xa4>)
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <_DoInit+0xac>)
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2210      	movs	r2, #16
 8004fae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004fc2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	e00c      	b.n	8004fe6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1c3 030f 	rsb	r3, r3, #15
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <_DoInit+0xb0>)
 8004fd4:	5cd1      	ldrb	r1, [r2, r3]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	460a      	mov	r2, r1
 8004fde:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b0f      	cmp	r3, #15
 8004fea:	d9ef      	bls.n	8004fcc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004fec:	f3bf 8f5f 	dmb	sy
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20012f64 	.word	0x20012f64
 8004ffc:	080073e4 	.word	0x080073e4
 8005000:	2001300c 	.word	0x2001300c
 8005004:	2001340c 	.word	0x2001340c
 8005008:	08007420 	.word	0x08007420

0800500c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005018:	2300      	movs	r3, #0
 800501a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	429a      	cmp	r2, r3
 800502e:	d905      	bls.n	800503c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
 800503a:	e007      	b.n	800504c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	1acb      	subs	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3b01      	subs	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	4293      	cmp	r3, r2
 8005058:	bf28      	it	cs
 800505a:	4613      	movcs	r3, r2
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4293      	cmp	r3, r2
 8005064:	bf28      	it	cs
 8005066:	4613      	movcs	r3, r2
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f001 fed3 	bl	8006e24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800507e:	6a3a      	ldr	r2, [r7, #32]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	4413      	add	r3, r2
 8005084:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	4413      	add	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d101      	bne.n	80050ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1b2      	bne.n	8005022 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80050bc:	6a3b      	ldr	r3, [r7, #32]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d911      	bls.n	800510e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	6938      	ldr	r0, [r7, #16]
 80050fa:	f001 fe93 	bl	8006e24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	441a      	add	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800510c:	e01f      	b.n	800514e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	6938      	ldr	r0, [r7, #16]
 8005122:	f001 fe7f 	bl	8006e24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4413      	add	r3, r2
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4619      	mov	r1, r3
 800513e:	6938      	ldr	r0, [r7, #16]
 8005140:	f001 fe70 	bl	8006e24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005144:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	60da      	str	r2, [r3, #12]
}
 800514e:	bf00      	nop
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	429a      	cmp	r2, r3
 8005170:	d808      	bhi.n	8005184 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e004      	b.n	800518e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800518e:	697b      	ldr	r3, [r7, #20]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	; 0x30
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80051a8:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b53      	cmp	r3, #83	; 0x53
 80051b4:	d001      	beq.n	80051ba <SEGGER_RTT_ReadNoLock+0x1e>
 80051b6:	f7ff fecf 	bl	8004f58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	3360      	adds	r3, #96	; 0x60
 80051c6:	4a37      	ldr	r2, [pc, #220]	; (80052a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051c8:	4413      	add	r3, r2
 80051ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051dc:	2300      	movs	r3, #0
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d92b      	bls.n	8005240 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bf28      	it	cs
 80051fa:	4613      	movcs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	4413      	add	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	6939      	ldr	r1, [r7, #16]
 800520c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520e:	f001 fe09 	bl	8006e24 <memcpy>
    NumBytesRead += NumBytesRem;
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800522a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005238:	429a      	cmp	r2, r3
 800523a:	d101      	bne.n	8005240 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800523c:	2300      	movs	r3, #0
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4293      	cmp	r3, r2
 800524e:	bf28      	it	cs
 8005250:	4613      	movcs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	4413      	add	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	6939      	ldr	r1, [r7, #16]
 8005268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526a:	f001 fddb 	bl	8006e24 <memcpy>
    NumBytesRead += NumBytesRem;
 800526e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005298:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800529c:	4618      	mov	r0, r3
 800529e:	3730      	adds	r7, #48	; 0x30
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20012f64 	.word	0x20012f64

080052a8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <SEGGER_RTT_WriteNoLock+0x9c>)
 80052c6:	4413      	add	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d029      	beq.n	8005326 <SEGGER_RTT_WriteNoLock+0x7e>
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d82e      	bhi.n	8005334 <SEGGER_RTT_WriteNoLock+0x8c>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <SEGGER_RTT_WriteNoLock+0x38>
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d013      	beq.n	8005306 <SEGGER_RTT_WriteNoLock+0x5e>
 80052de:	e029      	b.n	8005334 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7ff ff38 	bl	8005156 <_GetAvailWriteSpace>
 80052e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d202      	bcs.n	80052f6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80052f4:	e021      	b.n	800533a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7ff fee1 	bl	80050c6 <_WriteNoCheck>
    break;
 8005304:	e019      	b.n	800533a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f7ff ff25 	bl	8005156 <_GetAvailWriteSpace>
 800530c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4293      	cmp	r3, r2
 8005314:	bf28      	it	cs
 8005316:	4613      	movcs	r3, r2
 8005318:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7ff fed1 	bl	80050c6 <_WriteNoCheck>
    break;
 8005324:	e009      	b.n	800533a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	69b9      	ldr	r1, [r7, #24]
 800532a:	6978      	ldr	r0, [r7, #20]
 800532c:	f7ff fe6e 	bl	800500c <_WriteBlocking>
 8005330:	61f8      	str	r0, [r7, #28]
    break;
 8005332:	e002      	b.n	800533a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
    break;
 8005338:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800533a:	69fb      	ldr	r3, [r7, #28]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20012f64 	.word	0x20012f64

08005348 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <SEGGER_RTT_Write+0x48>)
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b53      	cmp	r3, #83	; 0x53
 8005360:	d001      	beq.n	8005366 <SEGGER_RTT_Write+0x1e>
 8005362:	f7ff fdf9 	bl	8004f58 <_DoInit>
  SEGGER_RTT_LOCK();
 8005366:	f3ef 8311 	mrs	r3, BASEPRI
 800536a:	f04f 0120 	mov.w	r1, #32
 800536e:	f381 8811 	msr	BASEPRI, r1
 8005372:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff95 	bl	80052a8 <SEGGER_RTT_WriteNoLock>
 800537e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005386:	697b      	ldr	r3, [r7, #20]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20012f64 	.word	0x20012f64

08005394 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b53      	cmp	r3, #83	; 0x53
 80053ae:	d001      	beq.n	80053b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80053b0:	f7ff fdd2 	bl	8004f58 <_DoInit>
  SEGGER_RTT_LOCK();
 80053b4:	f3ef 8311 	mrs	r3, BASEPRI
 80053b8:	f04f 0120 	mov.w	r1, #32
 80053bc:	f381 8811 	msr	BASEPRI, r1
 80053c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053c2:	4b35      	ldr	r3, [pc, #212]	; (8005498 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	440b      	add	r3, r1
 80053da:	3304      	adds	r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	dbeb      	blt.n	80053ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80053f2:	e000      	b.n	80053f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	da3f      	bge.n	8005480 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005400:	6939      	ldr	r1, [r7, #16]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005414:	6939      	ldr	r1, [r7, #16]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	4613      	mov	r3, r2
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	3304      	adds	r3, #4
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800542a:	6939      	ldr	r1, [r7, #16]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	3320      	adds	r3, #32
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	440b      	add	r3, r1
 800544c:	3328      	adds	r3, #40	; 0x28
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005452:	6939      	ldr	r1, [r7, #16]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	440b      	add	r3, r1
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	332c      	adds	r3, #44	; 0x2c
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800547a:	f3bf 8f5f 	dmb	sy
 800547e:	e002      	b.n	8005486 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800548c:	69fb      	ldr	r3, [r7, #28]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20012f64 	.word	0x20012f64

0800549c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b53      	cmp	r3, #83	; 0x53
 80054b6:	d001      	beq.n	80054bc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80054b8:	f7ff fd4e 	bl	8004f58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80054be:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d82c      	bhi.n	8005520 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80054c6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ca:	f04f 0120 	mov.w	r1, #32
 80054ce:	f381 8811 	msr	BASEPRI, r1
 80054d2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4613      	mov	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	3360      	adds	r3, #96	; 0x60
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005510:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e002      	b.n	8005526 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005520:	f04f 33ff 	mov.w	r3, #4294967295
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20012f64 	.word	0x20012f64

08005534 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	60fa      	str	r2, [r7, #12]
 800554a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d90a      	bls.n	8005568 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005556:	e007      	b.n	8005568 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	1c53      	adds	r3, r2, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1c59      	adds	r1, r3, #1
 8005562:	60f9      	str	r1, [r7, #12]
 8005564:	7812      	ldrb	r2, [r2, #0]
 8005566:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <_EncodeStr+0x46>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ee      	bne.n	8005558 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	b2da      	uxtb	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3307      	adds	r3, #7
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055b2:	4b34      	ldr	r3, [pc, #208]	; (8005684 <_HandleIncomingPacket+0xd8>)
 80055b4:	7e1b      	ldrb	r3, [r3, #24]
 80055b6:	4618      	mov	r0, r3
 80055b8:	1cfb      	adds	r3, r7, #3
 80055ba:	2201      	movs	r2, #1
 80055bc:	4619      	mov	r1, r3
 80055be:	f7ff fded 	bl	800519c <SEGGER_RTT_ReadNoLock>
 80055c2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d057      	beq.n	800567a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d031      	beq.n	8005634 <_HandleIncomingPacket+0x88>
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	dc40      	bgt.n	8005656 <_HandleIncomingPacket+0xaa>
 80055d4:	2b07      	cmp	r3, #7
 80055d6:	dc15      	bgt.n	8005604 <_HandleIncomingPacket+0x58>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dd3c      	ble.n	8005656 <_HandleIncomingPacket+0xaa>
 80055dc:	3b01      	subs	r3, #1
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d839      	bhi.n	8005656 <_HandleIncomingPacket+0xaa>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <_HandleIncomingPacket+0x3c>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	0800560b 	.word	0x0800560b
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005617 	.word	0x08005617
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005623 	.word	0x08005623
 80055fc:	08005629 	.word	0x08005629
 8005600:	0800562f 	.word	0x0800562f
 8005604:	2b7f      	cmp	r3, #127	; 0x7f
 8005606:	d033      	beq.n	8005670 <_HandleIncomingPacket+0xc4>
 8005608:	e025      	b.n	8005656 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800560a:	f000 fc2d 	bl	8005e68 <SEGGER_SYSVIEW_Start>
      break;
 800560e:	e034      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005610:	f000 fce4 	bl	8005fdc <SEGGER_SYSVIEW_Stop>
      break;
 8005614:	e031      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005616:	f000 febd 	bl	8006394 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800561a:	e02e      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800561c:	f000 fe82 	bl	8006324 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005620:	e02b      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005622:	f000 fd01 	bl	8006028 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005626:	e028      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005628:	f001 f8fa 	bl	8006820 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800562c:	e025      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800562e:	f001 f8d9 	bl	80067e4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005632:	e022      	b.n	800567a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <_HandleIncomingPacket+0xd8>)
 8005636:	7e1b      	ldrb	r3, [r3, #24]
 8005638:	4618      	mov	r0, r3
 800563a:	1cfb      	adds	r3, r7, #3
 800563c:	2201      	movs	r2, #1
 800563e:	4619      	mov	r1, r3
 8005640:	f7ff fdac 	bl	800519c <SEGGER_RTT_ReadNoLock>
 8005644:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	4618      	mov	r0, r3
 8005650:	f001 f83e 	bl	80066d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005654:	e00e      	b.n	8005674 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	b25b      	sxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	da0c      	bge.n	8005678 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <_HandleIncomingPacket+0xd8>)
 8005660:	7e1b      	ldrb	r3, [r3, #24]
 8005662:	4618      	mov	r0, r3
 8005664:	1cfb      	adds	r3, r7, #3
 8005666:	2201      	movs	r2, #1
 8005668:	4619      	mov	r1, r3
 800566a:	f7ff fd97 	bl	800519c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800566e:	e003      	b.n	8005678 <_HandleIncomingPacket+0xcc>
      break;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <_HandleIncomingPacket+0xce>
      break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <_HandleIncomingPacket+0xce>
      break;
 8005678:	bf00      	nop
    }
  }
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20014424 	.word	0x20014424

08005688 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800568e:	2301      	movs	r3, #1
 8005690:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569c:	4b31      	ldr	r3, [pc, #196]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a2:	e00b      	b.n	80056bc <_TrySendOverflowPacket+0x34>
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	09db      	lsrs	r3, r3, #7
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	2b7f      	cmp	r3, #127	; 0x7f
 80056c0:	d8f0      	bhi.n	80056a4 <_TrySendOverflowPacket+0x1c>
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056d2:	4b25      	ldr	r3, [pc, #148]	; (8005768 <_TrySendOverflowPacket+0xe0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	e00b      	b.n	8005704 <_TrySendOverflowPacket+0x7c>
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	1c59      	adds	r1, r3, #1
 80056f4:	6279      	str	r1, [r7, #36]	; 0x24
 80056f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	09db      	lsrs	r3, r3, #7
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2b7f      	cmp	r3, #127	; 0x7f
 8005708:	d8f0      	bhi.n	80056ec <_TrySendOverflowPacket+0x64>
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	627a      	str	r2, [r7, #36]	; 0x24
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	4618      	mov	r0, r3
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	461a      	mov	r2, r3
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	4619      	mov	r1, r3
 800572c:	f7fa fd70 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005730:	4603      	mov	r3, r0
 8005732:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3b01      	subs	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	e004      	b.n	8005758 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	4a03      	ldr	r2, [pc, #12]	; (8005764 <_TrySendOverflowPacket+0xdc>)
 8005756:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005758:	693b      	ldr	r3, [r7, #16]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3730      	adds	r7, #48	; 0x30
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20014424 	.word	0x20014424
 8005768:	e0001004 	.word	0xe0001004

0800576c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005778:	4b98      	ldr	r3, [pc, #608]	; (80059dc <_SendPacket+0x270>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d010      	beq.n	80057a2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005780:	4b96      	ldr	r3, [pc, #600]	; (80059dc <_SendPacket+0x270>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 812d 	beq.w	80059e4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800578a:	4b94      	ldr	r3, [pc, #592]	; (80059dc <_SendPacket+0x270>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d109      	bne.n	80057a6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005792:	f7ff ff79 	bl	8005688 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005796:	4b91      	ldr	r3, [pc, #580]	; (80059dc <_SendPacket+0x270>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b01      	cmp	r3, #1
 800579c:	f040 8124 	bne.w	80059e8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80057a0:	e001      	b.n	80057a6 <_SendPacket+0x3a>
    goto Send;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <_SendPacket+0x3c>
Send:
 80057a6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b1f      	cmp	r3, #31
 80057ac:	d809      	bhi.n	80057c2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057ae:	4b8b      	ldr	r3, [pc, #556]	; (80059dc <_SendPacket+0x270>)
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 8115 	bne.w	80059ec <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b17      	cmp	r3, #23
 80057c6:	d807      	bhi.n	80057d8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e0c4      	b.n	8005962 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b7f      	cmp	r3, #127	; 0x7f
 80057e4:	d912      	bls.n	800580c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	09da      	lsrs	r2, r3, #7
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	3a01      	subs	r2, #1
 80057fe:	60fa      	str	r2, [r7, #12]
 8005800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	e006      	b.n	800581a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b7e      	cmp	r3, #126	; 0x7e
 800581e:	d807      	bhi.n	8005830 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b01      	subs	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e098      	b.n	8005962 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005836:	d212      	bcs.n	800585e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	09da      	lsrs	r2, r3, #7
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3b01      	subs	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	3a01      	subs	r2, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e081      	b.n	8005962 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005864:	d21d      	bcs.n	80058a2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0b9a      	lsrs	r2, r3, #14
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3b01      	subs	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	09db      	lsrs	r3, r3, #7
 800587a:	b2db      	uxtb	r3, r3
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	3a01      	subs	r2, #1
 8005880:	60fa      	str	r2, [r7, #12]
 8005882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	3a01      	subs	r2, #1
 8005894:	60fa      	str	r2, [r7, #12]
 8005896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e05f      	b.n	8005962 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058a8:	d228      	bcs.n	80058fc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0d5a      	lsrs	r2, r3, #21
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0b9b      	lsrs	r3, r3, #14
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	3a01      	subs	r2, #1
 80058c4:	60fa      	str	r2, [r7, #12]
 80058c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	3a01      	subs	r2, #1
 80058da:	60fa      	str	r2, [r7, #12]
 80058dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	3a01      	subs	r2, #1
 80058ee:	60fa      	str	r2, [r7, #12]
 80058f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e032      	b.n	8005962 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0f1a      	lsrs	r2, r3, #28
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b01      	subs	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	0d5b      	lsrs	r3, r3, #21
 8005910:	b2db      	uxtb	r3, r3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	3a01      	subs	r2, #1
 8005916:	60fa      	str	r2, [r7, #12]
 8005918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	0b9b      	lsrs	r3, r3, #14
 8005926:	b2db      	uxtb	r3, r3
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	3a01      	subs	r2, #1
 800592c:	60fa      	str	r2, [r7, #12]
 800592e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	b2db      	uxtb	r3, r3
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	3a01      	subs	r2, #1
 8005942:	60fa      	str	r2, [r7, #12]
 8005944:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	3a01      	subs	r2, #1
 8005956:	60fa      	str	r2, [r7, #12]
 8005958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005962:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <_SendPacket+0x274>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005968:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <_SendPacket+0x270>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	e00b      	b.n	8005994 <_SendPacket+0x228>
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	6279      	str	r1, [r7, #36]	; 0x24
 8005986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b7f      	cmp	r3, #127	; 0x7f
 8005998:	d8f0      	bhi.n	800597c <_SendPacket+0x210>
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	627a      	str	r2, [r7, #36]	; 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <_SendPacket+0x270>)
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	4618      	mov	r0, r3
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	f7fa fc29 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059be:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059c6:	4a05      	ldr	r2, [pc, #20]	; (80059dc <_SendPacket+0x270>)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	60d3      	str	r3, [r2, #12]
 80059cc:	e00f      	b.n	80059ee <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80059ce:	4b03      	ldr	r3, [pc, #12]	; (80059dc <_SendPacket+0x270>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4b01      	ldr	r3, [pc, #4]	; (80059dc <_SendPacket+0x270>)
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e008      	b.n	80059ee <_SendPacket+0x282>
 80059dc:	20014424 	.word	0x20014424
 80059e0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <_SendPacket+0x282>
      goto SendDone;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <_SendPacket+0x282>
      goto SendDone;
 80059ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <_SendPacket+0x2d4>)
 80059f0:	7e1b      	ldrb	r3, [r3, #24]
 80059f2:	4619      	mov	r1, r3
 80059f4:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <_SendPacket+0x2d8>)
 80059f6:	460b      	mov	r3, r1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	440b      	add	r3, r1
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4413      	add	r3, r2
 8005a00:	336c      	adds	r3, #108	; 0x6c
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <_SendPacket+0x2d4>)
 8005a06:	7e1b      	ldrb	r3, [r3, #24]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	490e      	ldr	r1, [pc, #56]	; (8005a44 <_SendPacket+0x2d8>)
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4403      	add	r3, r0
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	3370      	adds	r3, #112	; 0x70
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00b      	beq.n	8005a36 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <_SendPacket+0x2d4>)
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <_SendPacket+0x2d4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a2c:	f7ff fdbe 	bl	80055ac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <_SendPacket+0x2d4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a36:	bf00      	nop
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20014424 	.word	0x20014424
 8005a44:	20012f64 	.word	0x20012f64

08005a48 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a56:	2300      	movs	r3, #0
 8005a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a5c:	4917      	ldr	r1, [pc, #92]	; (8005abc <SEGGER_SYSVIEW_Init+0x74>)
 8005a5e:	4818      	ldr	r0, [pc, #96]	; (8005ac0 <SEGGER_SYSVIEW_Init+0x78>)
 8005a60:	f7ff fc98 	bl	8005394 <SEGGER_RTT_AllocUpBuffer>
 8005a64:	4603      	mov	r3, r0
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6e:	785a      	ldrb	r2, [r3, #1]
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a72:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a76:	7e1b      	ldrb	r3, [r3, #24]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2308      	movs	r3, #8
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <SEGGER_SYSVIEW_Init+0x80>)
 8005a82:	490f      	ldr	r1, [pc, #60]	; (8005ac0 <SEGGER_SYSVIEW_Init+0x78>)
 8005a84:	f7ff fd0a 	bl	800549c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <SEGGER_SYSVIEW_Init+0x84>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a94:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a96:	4a0b      	ldr	r2, [pc, #44]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005aa2:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005aa8:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	2001341c 	.word	0x2001341c
 8005ac0:	080073f8 	.word	0x080073f8
 8005ac4:	20014424 	.word	0x20014424
 8005ac8:	2001441c 	.word	0x2001441c
 8005acc:	e0001004 	.word	0xe0001004

08005ad0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6113      	str	r3, [r2, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20014424 	.word	0x20014424

08005af0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005af8:	f3ef 8311 	mrs	r3, BASEPRI
 8005afc:	f04f 0120 	mov.w	r1, #32
 8005b00:	f381 8811 	msr	BASEPRI, r1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	4808      	ldr	r0, [pc, #32]	; (8005b28 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b08:	f7ff fd44 	bl	8005594 <_PreparePacket>
 8005b0c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68b8      	ldr	r0, [r7, #8]
 8005b14:	f7ff fe2a 	bl	800576c <_SendPacket>
  RECORD_END();
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20014454 	.word	0x20014454

08005b2c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b36:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3a:	f04f 0120 	mov.w	r1, #32
 8005b3e:	f381 8811 	msr	BASEPRI, r1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	4816      	ldr	r0, [pc, #88]	; (8005ba0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b46:	f7ff fd25 	bl	8005594 <_PreparePacket>
 8005b4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e00b      	b.n	8005b72 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	61f9      	str	r1, [r7, #28]
 8005b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b7f      	cmp	r3, #127	; 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	61fa      	str	r2, [r7, #28]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	6938      	ldr	r0, [r7, #16]
 8005b8e:	f7ff fded 	bl	800576c <_SendPacket>
  RECORD_END();
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f383 8811 	msr	BASEPRI, r3
}
 8005b98:	bf00      	nop
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20014454 	.word	0x20014454

08005ba4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	; 0x30
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb4:	f04f 0120 	mov.w	r1, #32
 8005bb8:	f381 8811 	msr	BASEPRI, r1
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	4825      	ldr	r0, [pc, #148]	; (8005c54 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005bc0:	f7ff fce8 	bl	8005594 <_PreparePacket>
 8005bc4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd2:	e00b      	b.n	8005bec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	e00b      	b.n	8005c24 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	6279      	str	r1, [r7, #36]	; 0x24
 8005c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	09db      	lsrs	r3, r3, #7
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2b7f      	cmp	r3, #127	; 0x7f
 8005c28:	d8f0      	bhi.n	8005c0c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6979      	ldr	r1, [r7, #20]
 8005c3e:	69b8      	ldr	r0, [r7, #24]
 8005c40:	f7ff fd94 	bl	800576c <_SendPacket>
  RECORD_END();
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f383 8811 	msr	BASEPRI, r3
}
 8005c4a:	bf00      	nop
 8005c4c:	3730      	adds	r7, #48	; 0x30
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20014454 	.word	0x20014454

08005c58 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	; 0x38
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c66:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6a:	f04f 0120 	mov.w	r1, #32
 8005c6e:	f381 8811 	msr	BASEPRI, r1
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	4832      	ldr	r0, [pc, #200]	; (8005d40 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c76:	f7ff fc8d 	bl	8005594 <_PreparePacket>
 8005c7a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
 8005c88:	e00b      	b.n	8005ca2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	1c59      	adds	r1, r3, #1
 8005c92:	6379      	str	r1, [r7, #52]	; 0x34
 8005c94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	09db      	lsrs	r3, r3, #7
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca6:	d8f0      	bhi.n	8005c8a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	637a      	str	r2, [r7, #52]	; 0x34
 8005cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc0:	e00b      	b.n	8005cda <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cde:	d8f0      	bhi.n	8005cc2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	e00b      	b.n	8005d12 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	6279      	str	r1, [r7, #36]	; 0x24
 8005d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	09db      	lsrs	r3, r3, #7
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	2b7f      	cmp	r3, #127	; 0x7f
 8005d16:	d8f0      	bhi.n	8005cfa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	6979      	ldr	r1, [r7, #20]
 8005d2c:	69b8      	ldr	r0, [r7, #24]
 8005d2e:	f7ff fd1d 	bl	800576c <_SendPacket>
  RECORD_END();
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f383 8811 	msr	BASEPRI, r3
}
 8005d38:	bf00      	nop
 8005d3a:	3738      	adds	r7, #56	; 0x38
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20014454 	.word	0x20014454

08005d44 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b090      	sub	sp, #64	; 0x40
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	f04f 0120 	mov.w	r1, #32
 8005d5a:	f381 8811 	msr	BASEPRI, r1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	4840      	ldr	r0, [pc, #256]	; (8005e64 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d62:	f7ff fc17 	bl	8005594 <_PreparePacket>
 8005d66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d74:	e00b      	b.n	8005d8e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	09db      	lsrs	r3, r3, #7
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	2b7f      	cmp	r3, #127	; 0x7f
 8005d92:	d8f0      	bhi.n	8005d76 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
 8005dac:	e00b      	b.n	8005dc6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	1c59      	adds	r1, r3, #1
 8005db6:	6379      	str	r1, [r7, #52]	; 0x34
 8005db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	09db      	lsrs	r3, r3, #7
 8005dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dca:	d8f0      	bhi.n	8005dae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	637a      	str	r2, [r7, #52]	; 0x34
 8005dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de4:	e00b      	b.n	8005dfe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	1c59      	adds	r1, r3, #1
 8005dee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	2b7f      	cmp	r3, #127	; 0x7f
 8005e02:	d8f0      	bhi.n	8005de6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	623b      	str	r3, [r7, #32]
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6279      	str	r1, [r7, #36]	; 0x24
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	627a      	str	r2, [r7, #36]	; 0x24
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	69b8      	ldr	r0, [r7, #24]
 8005e52:	f7ff fc8b 	bl	800576c <_SendPacket>
  RECORD_END();
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f383 8811 	msr	BASEPRI, r3
}
 8005e5c:	bf00      	nop
 8005e5e:	3740      	adds	r7, #64	; 0x40
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20014454 	.word	0x20014454

08005e68 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005e6e:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005e74:	f3ef 8311 	mrs	r3, BASEPRI
 8005e78:	f04f 0120 	mov.w	r1, #32
 8005e7c:	f381 8811 	msr	BASEPRI, r1
 8005e80:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005e82:	4b53      	ldr	r3, [pc, #332]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	220a      	movs	r2, #10
 8005e88:	4952      	ldr	r1, [pc, #328]	; (8005fd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fa f9c0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e96:	200a      	movs	r0, #10
 8005e98:	f7ff fe2a 	bl	8005af0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea0:	f04f 0120 	mov.w	r1, #32
 8005ea4:	f381 8811 	msr	BASEPRI, r1
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	484b      	ldr	r0, [pc, #300]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x170>)
 8005eac:	f7ff fb72 	bl	8005594 <_PreparePacket>
 8005eb0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec0:	e00b      	b.n	8005eda <SEGGER_SYSVIEW_Start+0x72>
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ede:	d8f0      	bhi.n	8005ec2 <SEGGER_SYSVIEW_Start+0x5a>
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	e00b      	b.n	8005f14 <SEGGER_SYSVIEW_Start+0xac>
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	6279      	str	r1, [r7, #36]	; 0x24
 8005f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b7f      	cmp	r3, #127	; 0x7f
 8005f18:	d8f0      	bhi.n	8005efc <SEGGER_SYSVIEW_Start+0x94>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e00b      	b.n	8005f4e <SEGGER_SYSVIEW_Start+0xe6>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	61f9      	str	r1, [r7, #28]
 8005f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	09db      	lsrs	r3, r3, #7
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b7f      	cmp	r3, #127	; 0x7f
 8005f52:	d8f0      	bhi.n	8005f36 <SEGGER_SYSVIEW_Start+0xce>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e00b      	b.n	8005f86 <SEGGER_SYSVIEW_Start+0x11e>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	6179      	str	r1, [r7, #20]
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <SEGGER_SYSVIEW_Start+0x106>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	617a      	str	r2, [r7, #20]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f9c:	2218      	movs	r2, #24
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fbe3 	bl	800576c <_SendPacket>
      RECORD_END();
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <SEGGER_SYSVIEW_Start+0x168>)
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005fba:	f000 f9eb 	bl	8006394 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005fbe:	f000 f9b1 	bl	8006324 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005fc2:	f000 fc2d 	bl	8006820 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005fc6:	bf00      	nop
 8005fc8:	3730      	adds	r7, #48	; 0x30
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20014424 	.word	0x20014424
 8005fd4:	08007434 	.word	0x08007434
 8005fd8:	20014454 	.word	0x20014454

08005fdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe6:	f04f 0120 	mov.w	r1, #32
 8005fea:	f381 8811 	msr	BASEPRI, r1
 8005fee:	607b      	str	r3, [r7, #4]
 8005ff0:	480b      	ldr	r0, [pc, #44]	; (8006020 <SEGGER_SYSVIEW_Stop+0x44>)
 8005ff2:	f7ff facf 	bl	8005594 <_PreparePacket>
 8005ff6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006000:	220b      	movs	r2, #11
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6838      	ldr	r0, [r7, #0]
 8006006:	f7ff fbb1 	bl	800576c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <SEGGER_SYSVIEW_Stop+0x48>)
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f383 8811 	msr	BASEPRI, r3
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20014454 	.word	0x20014454
 8006024:	20014424 	.word	0x20014424

08006028 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b08c      	sub	sp, #48	; 0x30
 800602c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800602e:	f3ef 8311 	mrs	r3, BASEPRI
 8006032:	f04f 0120 	mov.w	r1, #32
 8006036:	f381 8811 	msr	BASEPRI, r1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	4845      	ldr	r0, [pc, #276]	; (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800603e:	f7ff faa9 	bl	8005594 <_PreparePacket>
 8006042:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604c:	4b42      	ldr	r3, [pc, #264]	; (8006158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	e00b      	b.n	800606c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800605e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	09db      	lsrs	r3, r3, #7
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d8f0      	bhi.n	8006054 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	4b34      	ldr	r3, [pc, #208]	; (8006158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	e00b      	b.n	80060a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	6279      	str	r1, [r7, #36]	; 0x24
 8006098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	09db      	lsrs	r3, r3, #7
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2b7f      	cmp	r3, #127	; 0x7f
 80060aa:	d8f0      	bhi.n	800608e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	627a      	str	r2, [r7, #36]	; 0x24
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e00b      	b.n	80060e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	61f9      	str	r1, [r7, #28]
 80060d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	61fa      	str	r2, [r7, #28]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	e00b      	b.n	8006118 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	6179      	str	r1, [r7, #20]
 800610a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b7f      	cmp	r3, #127	; 0x7f
 800611c:	d8f0      	bhi.n	8006100 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	617a      	str	r2, [r7, #20]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800612e:	2218      	movs	r2, #24
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	68b8      	ldr	r0, [r7, #8]
 8006134:	f7ff fb1a 	bl	800576c <_SendPacket>
  RECORD_END();
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006146:	4b04      	ldr	r3, [pc, #16]	; (8006158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	4798      	blx	r3
  }
}
 800614c:	bf00      	nop
 800614e:	3730      	adds	r7, #48	; 0x30
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20014454 	.word	0x20014454
 8006158:	20014424 	.word	0x20014424

0800615c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b092      	sub	sp, #72	; 0x48
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006164:	f3ef 8311 	mrs	r3, BASEPRI
 8006168:	f04f 0120 	mov.w	r1, #32
 800616c:	f381 8811 	msr	BASEPRI, r1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	486a      	ldr	r0, [pc, #424]	; (800631c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006174:	f7ff fa0e 	bl	8005594 <_PreparePacket>
 8006178:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	647b      	str	r3, [r7, #68]	; 0x44
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b66      	ldr	r3, [pc, #408]	; (8006320 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
 800618e:	e00b      	b.n	80061a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	b2da      	uxtb	r2, r3
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	1c59      	adds	r1, r3, #1
 8006198:	6479      	str	r1, [r7, #68]	; 0x44
 800619a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	09db      	lsrs	r3, r3, #7
 80061a6:	643b      	str	r3, [r7, #64]	; 0x40
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	2b7f      	cmp	r3, #127	; 0x7f
 80061ac:	d8f0      	bhi.n	8006190 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80061ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	647a      	str	r2, [r7, #68]	; 0x44
 80061b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c8:	e00b      	b.n	80061e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	09db      	lsrs	r3, r3, #7
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2b7f      	cmp	r3, #127	; 0x7f
 80061e6:	d8f0      	bhi.n	80061ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	4619      	mov	r1, r3
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff f997 	bl	8005534 <_EncodeStr>
 8006206:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006208:	2209      	movs	r2, #9
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	6938      	ldr	r0, [r7, #16]
 800620e:	f7ff faad 	bl	800576c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b40      	ldr	r3, [pc, #256]	; (8006320 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	633b      	str	r3, [r7, #48]	; 0x30
 8006226:	e00b      	b.n	8006240 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	b2da      	uxtb	r2, r3
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	1c59      	adds	r1, r3, #1
 8006230:	6379      	str	r1, [r7, #52]	; 0x34
 8006232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	09db      	lsrs	r3, r3, #7
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	2b7f      	cmp	r3, #127	; 0x7f
 8006244:	d8f0      	bhi.n	8006228 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	637a      	str	r2, [r7, #52]	; 0x34
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	e00b      	b.n	80062b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	6279      	str	r1, [r7, #36]	; 0x24
 80062a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	09db      	lsrs	r3, r3, #7
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	2b7f      	cmp	r3, #127	; 0x7f
 80062b8:	d8f0      	bhi.n	800629c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	627a      	str	r2, [r7, #36]	; 0x24
 80062c0:	6a3a      	ldr	r2, [r7, #32]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	2300      	movs	r3, #0
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e00b      	b.n	80062ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	61f9      	str	r1, [r7, #28]
 80062de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	09db      	lsrs	r3, r3, #7
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b7f      	cmp	r3, #127	; 0x7f
 80062f0:	d8f0      	bhi.n	80062d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	61fa      	str	r2, [r7, #28]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006302:	2215      	movs	r2, #21
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f7ff fa30 	bl	800576c <_SendPacket>
  RECORD_END();
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f383 8811 	msr	BASEPRI, r3
}
 8006312:	bf00      	nop
 8006314:	3748      	adds	r7, #72	; 0x48
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20014454 	.word	0x20014454
 8006320:	20014424 	.word	0x20014424

08006324 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800633a:	4b03      	ldr	r3, [pc, #12]	; (8006348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4798      	blx	r3
  }
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20014424 	.word	0x20014424

0800634c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006354:	f3ef 8311 	mrs	r3, BASEPRI
 8006358:	f04f 0120 	mov.w	r1, #32
 800635c:	f381 8811 	msr	BASEPRI, r1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	480b      	ldr	r0, [pc, #44]	; (8006390 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006364:	f7ff f916 	bl	8005594 <_PreparePacket>
 8006368:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800636a:	2280      	movs	r2, #128	; 0x80
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f7ff f8e0 	bl	8005534 <_EncodeStr>
 8006374:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006376:	220e      	movs	r2, #14
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	6938      	ldr	r0, [r7, #16]
 800637c:	f7ff f9f6 	bl	800576c <_SendPacket>
  RECORD_END();
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f383 8811 	msr	BASEPRI, r3
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20014454 	.word	0x20014454

08006394 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01a      	beq.n	80063d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d015      	beq.n	80063d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80063ac:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4798      	blx	r3
 80063b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80063ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	000a      	movs	r2, r1
 80063c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063ca:	4613      	mov	r3, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4621      	mov	r1, r4
 80063d0:	200d      	movs	r0, #13
 80063d2:	f7ff fbe7 	bl	8005ba4 <SEGGER_SYSVIEW_RecordU32x2>
 80063d6:	e006      	b.n	80063e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	200c      	movs	r0, #12
 80063e0:	f7ff fba4 	bl	8005b2c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20014424 	.word	0x20014424
 80063f4:	e0001004 	.word	0xe0001004

080063f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006402:	f04f 0120 	mov.w	r1, #32
 8006406:	f381 8811 	msr	BASEPRI, r1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	4819      	ldr	r0, [pc, #100]	; (8006474 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800640e:	f7ff f8c1 	bl	8005594 <_PreparePacket>
 8006412:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006418:	4b17      	ldr	r3, [pc, #92]	; (8006478 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006420:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e00b      	b.n	8006444 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	6179      	str	r1, [r7, #20]
 8006436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b7f      	cmp	r3, #127	; 0x7f
 8006448:	d8f0      	bhi.n	800642c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	617a      	str	r2, [r7, #20]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800645a:	2202      	movs	r2, #2
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	68b8      	ldr	r0, [r7, #8]
 8006460:	f7ff f984 	bl	800576c <_SendPacket>
  RECORD_END();
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f383 8811 	msr	BASEPRI, r3
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20014454 	.word	0x20014454
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006482:	f3ef 8311 	mrs	r3, BASEPRI
 8006486:	f04f 0120 	mov.w	r1, #32
 800648a:	f381 8811 	msr	BASEPRI, r1
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	4807      	ldr	r0, [pc, #28]	; (80064b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006492:	f7ff f87f 	bl	8005594 <_PreparePacket>
 8006496:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006498:	2203      	movs	r2, #3
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6838      	ldr	r0, [r7, #0]
 800649e:	f7ff f965 	bl	800576c <_SendPacket>
  RECORD_END();
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f383 8811 	msr	BASEPRI, r3
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20014454 	.word	0x20014454

080064b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	4807      	ldr	r0, [pc, #28]	; (80064e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80064ca:	f7ff f863 	bl	8005594 <_PreparePacket>
 80064ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80064d0:	2212      	movs	r2, #18
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6838      	ldr	r0, [r7, #0]
 80064d6:	f7ff f949 	bl	800576c <_SendPacket>
  RECORD_END();
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f383 8811 	msr	BASEPRI, r3
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20014454 	.word	0x20014454

080064ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064f2:	f3ef 8311 	mrs	r3, BASEPRI
 80064f6:	f04f 0120 	mov.w	r1, #32
 80064fa:	f381 8811 	msr	BASEPRI, r1
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	4807      	ldr	r0, [pc, #28]	; (8006520 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006502:	f7ff f847 	bl	8005594 <_PreparePacket>
 8006506:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006508:	2211      	movs	r2, #17
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6838      	ldr	r0, [r7, #0]
 800650e:	f7ff f92d 	bl	800576c <_SendPacket>
  RECORD_END();
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f383 8811 	msr	BASEPRI, r3
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20014454 	.word	0x20014454

08006524 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800652c:	f3ef 8311 	mrs	r3, BASEPRI
 8006530:	f04f 0120 	mov.w	r1, #32
 8006534:	f381 8811 	msr	BASEPRI, r1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	4819      	ldr	r0, [pc, #100]	; (80065a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800653c:	f7ff f82a 	bl	8005594 <_PreparePacket>
 8006540:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006546:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	e00b      	b.n	8006572 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	61f9      	str	r1, [r7, #28]
 8006564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	09db      	lsrs	r3, r3, #7
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b7f      	cmp	r3, #127	; 0x7f
 8006576:	d8f0      	bhi.n	800655a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	61fa      	str	r2, [r7, #28]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006588:	2208      	movs	r2, #8
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	6938      	ldr	r0, [r7, #16]
 800658e:	f7ff f8ed 	bl	800576c <_SendPacket>
  RECORD_END();
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f383 8811 	msr	BASEPRI, r3
}
 8006598:	bf00      	nop
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20014454 	.word	0x20014454
 80065a4:	20014424 	.word	0x20014424

080065a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065b0:	f3ef 8311 	mrs	r3, BASEPRI
 80065b4:	f04f 0120 	mov.w	r1, #32
 80065b8:	f381 8811 	msr	BASEPRI, r1
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	4819      	ldr	r0, [pc, #100]	; (8006624 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80065c0:	f7fe ffe8 	bl	8005594 <_PreparePacket>
 80065c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	e00b      	b.n	80065f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	61f9      	str	r1, [r7, #28]
 80065e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b7f      	cmp	r3, #127	; 0x7f
 80065fa:	d8f0      	bhi.n	80065de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	61fa      	str	r2, [r7, #28]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800660c:	2204      	movs	r2, #4
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	6938      	ldr	r0, [r7, #16]
 8006612:	f7ff f8ab 	bl	800576c <_SendPacket>
  RECORD_END();
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f383 8811 	msr	BASEPRI, r3
}
 800661c:	bf00      	nop
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20014454 	.word	0x20014454
 8006628:	20014424 	.word	0x20014424

0800662c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006634:	f3ef 8311 	mrs	r3, BASEPRI
 8006638:	f04f 0120 	mov.w	r1, #32
 800663c:	f381 8811 	msr	BASEPRI, r1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	4819      	ldr	r0, [pc, #100]	; (80066a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006644:	f7fe ffa6 	bl	8005594 <_PreparePacket>
 8006648:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800664e:	4b17      	ldr	r3, [pc, #92]	; (80066ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e00b      	b.n	800667a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	61f9      	str	r1, [r7, #28]
 800666c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b7f      	cmp	r3, #127	; 0x7f
 800667e:	d8f0      	bhi.n	8006662 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	61fa      	str	r2, [r7, #28]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006690:	2206      	movs	r2, #6
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	6938      	ldr	r0, [r7, #16]
 8006696:	f7ff f869 	bl	800576c <_SendPacket>
  RECORD_END();
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f383 8811 	msr	BASEPRI, r3
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20014454 	.word	0x20014454
 80066ac:	20014424 	.word	0x20014424

080066b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	1ad3      	subs	r3, r2, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	20014424 	.word	0x20014424

080066d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80066da:	4b40      	ldr	r3, [pc, #256]	; (80067dc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d077      	beq.n	80067d2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80066e2:	4b3e      	ldr	r3, [pc, #248]	; (80067dc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80066e8:	2300      	movs	r3, #0
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ec:	e008      	b.n	8006700 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	3301      	adds	r3, #1
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006704:	429a      	cmp	r2, r3
 8006706:	d3f2      	bcc.n	80066ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006708:	e000      	b.n	800670c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800670a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d055      	beq.n	80067be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006712:	f3ef 8311 	mrs	r3, BASEPRI
 8006716:	f04f 0120 	mov.w	r1, #32
 800671a:	f381 8811 	msr	BASEPRI, r1
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	482f      	ldr	r0, [pc, #188]	; (80067e0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006722:	f7fe ff37 	bl	8005594 <_PreparePacket>
 8006726:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	e00b      	b.n	800674e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1c59      	adds	r1, r3, #1
 800673e:	6279      	str	r1, [r7, #36]	; 0x24
 8006740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	09db      	lsrs	r3, r3, #7
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b7f      	cmp	r3, #127	; 0x7f
 8006752:	d8f0      	bhi.n	8006736 <SEGGER_SYSVIEW_SendModule+0x66>
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	627a      	str	r2, [r7, #36]	; 0x24
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e00b      	b.n	8006788 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	61f9      	str	r1, [r7, #28]
 800677a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	09db      	lsrs	r3, r3, #7
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b7f      	cmp	r3, #127	; 0x7f
 800678c:	d8f0      	bhi.n	8006770 <SEGGER_SYSVIEW_SendModule+0xa0>
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	61fa      	str	r2, [r7, #28]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	4619      	mov	r1, r3
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7fe fec4 	bl	8005534 <_EncodeStr>
 80067ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80067ae:	2216      	movs	r2, #22
 80067b0:	68f9      	ldr	r1, [r7, #12]
 80067b2:	6938      	ldr	r0, [r7, #16]
 80067b4:	f7fe ffda 	bl	800576c <_SendPacket>
      RECORD_END();
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d006      	beq.n	80067d2 <SEGGER_SYSVIEW_SendModule+0x102>
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4798      	blx	r3
    }
  }
}
 80067d2:	bf00      	nop
 80067d4:	3730      	adds	r7, #48	; 0x30
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	2001444c 	.word	0x2001444c
 80067e0:	20014454 	.word	0x20014454

080067e4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80067ea:	4b0c      	ldr	r3, [pc, #48]	; (800681c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00f      	beq.n	8006812 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f2      	bne.n	80067f8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	2001444c 	.word	0x2001444c

08006820 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	f04f 0120 	mov.w	r1, #32
 800682e:	f381 8811 	msr	BASEPRI, r1
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	4817      	ldr	r0, [pc, #92]	; (8006894 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006836:	f7fe fead 	bl	8005594 <_PreparePacket>
 800683a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	4b14      	ldr	r3, [pc, #80]	; (8006898 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e00b      	b.n	8006864 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1c59      	adds	r1, r3, #1
 8006854:	6179      	str	r1, [r7, #20]
 8006856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b7f      	cmp	r3, #127	; 0x7f
 8006868:	d8f0      	bhi.n	800684c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	617a      	str	r2, [r7, #20]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800687a:	221b      	movs	r2, #27
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f7fe ff74 	bl	800576c <_SendPacket>
  RECORD_END();
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f383 8811 	msr	BASEPRI, r3
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20014454 	.word	0x20014454
 8006898:	20014450 	.word	0x20014450

0800689c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068a4:	f3ef 8311 	mrs	r3, BASEPRI
 80068a8:	f04f 0120 	mov.w	r1, #32
 80068ac:	f381 8811 	msr	BASEPRI, r1
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	4827      	ldr	r0, [pc, #156]	; (8006950 <SEGGER_SYSVIEW_Warn+0xb4>)
 80068b4:	f7fe fe6e 	bl	8005594 <_PreparePacket>
 80068b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068ba:	2280      	movs	r2, #128	; 0x80
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	6938      	ldr	r0, [r7, #16]
 80068c0:	f7fe fe38 	bl	8005534 <_EncodeStr>
 80068c4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	2301      	movs	r3, #1
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_Warn+0x4c>
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	6279      	str	r1, [r7, #36]	; 0x24
 80068da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_Warn+0x34>
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	627a      	str	r2, [r7, #36]	; 0x24
 80068f4:	6a3a      	ldr	r2, [r7, #32]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e00b      	b.n	8006920 <SEGGER_SYSVIEW_Warn+0x84>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	61f9      	str	r1, [r7, #28]
 8006912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	09db      	lsrs	r3, r3, #7
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b7f      	cmp	r3, #127	; 0x7f
 8006924:	d8f0      	bhi.n	8006908 <SEGGER_SYSVIEW_Warn+0x6c>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	61fa      	str	r2, [r7, #28]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006936:	221a      	movs	r2, #26
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f7fe ff16 	bl	800576c <_SendPacket>
  RECORD_END();
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f383 8811 	msr	BASEPRI, r3
}
 8006946:	bf00      	nop
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20014454 	.word	0x20014454

08006954 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	2000      	movs	r0, #0
 8006968:	f7fe fcee 	bl	8005348 <SEGGER_RTT_Write>
  return len;
 800696c:	683b      	ldr	r3, [r7, #0]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <std>:
 8006978:	2300      	movs	r3, #0
 800697a:	b510      	push	{r4, lr}
 800697c:	4604      	mov	r4, r0
 800697e:	e9c0 3300 	strd	r3, r3, [r0]
 8006982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006986:	6083      	str	r3, [r0, #8]
 8006988:	8181      	strh	r1, [r0, #12]
 800698a:	6643      	str	r3, [r0, #100]	; 0x64
 800698c:	81c2      	strh	r2, [r0, #14]
 800698e:	6183      	str	r3, [r0, #24]
 8006990:	4619      	mov	r1, r3
 8006992:	2208      	movs	r2, #8
 8006994:	305c      	adds	r0, #92	; 0x5c
 8006996:	f000 f9e3 	bl	8006d60 <memset>
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <std+0x38>)
 800699c:	6263      	str	r3, [r4, #36]	; 0x24
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <std+0x3c>)
 80069a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <std+0x40>)
 80069a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069a6:	4b05      	ldr	r3, [pc, #20]	; (80069bc <std+0x44>)
 80069a8:	6224      	str	r4, [r4, #32]
 80069aa:	6323      	str	r3, [r4, #48]	; 0x30
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	bf00      	nop
 80069b0:	08006b91 	.word	0x08006b91
 80069b4:	08006bb3 	.word	0x08006bb3
 80069b8:	08006beb 	.word	0x08006beb
 80069bc:	08006c0f 	.word	0x08006c0f

080069c0 <stdio_exit_handler>:
 80069c0:	4a02      	ldr	r2, [pc, #8]	; (80069cc <stdio_exit_handler+0xc>)
 80069c2:	4903      	ldr	r1, [pc, #12]	; (80069d0 <stdio_exit_handler+0x10>)
 80069c4:	4803      	ldr	r0, [pc, #12]	; (80069d4 <stdio_exit_handler+0x14>)
 80069c6:	f000 b869 	b.w	8006a9c <_fwalk_sglue>
 80069ca:	bf00      	nop
 80069cc:	20000014 	.word	0x20000014
 80069d0:	0800713d 	.word	0x0800713d
 80069d4:	20000020 	.word	0x20000020

080069d8 <cleanup_stdio>:
 80069d8:	6841      	ldr	r1, [r0, #4]
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <cleanup_stdio+0x34>)
 80069dc:	4299      	cmp	r1, r3
 80069de:	b510      	push	{r4, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	d001      	beq.n	80069e8 <cleanup_stdio+0x10>
 80069e4:	f000 fbaa 	bl	800713c <_fflush_r>
 80069e8:	68a1      	ldr	r1, [r4, #8]
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <cleanup_stdio+0x38>)
 80069ec:	4299      	cmp	r1, r3
 80069ee:	d002      	beq.n	80069f6 <cleanup_stdio+0x1e>
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fba3 	bl	800713c <_fflush_r>
 80069f6:	68e1      	ldr	r1, [r4, #12]
 80069f8:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <cleanup_stdio+0x3c>)
 80069fa:	4299      	cmp	r1, r3
 80069fc:	d004      	beq.n	8006a08 <cleanup_stdio+0x30>
 80069fe:	4620      	mov	r0, r4
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 bb9a 	b.w	800713c <_fflush_r>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20014538 	.word	0x20014538
 8006a10:	200145a0 	.word	0x200145a0
 8006a14:	20014608 	.word	0x20014608

08006a18 <global_stdio_init.part.0>:
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <global_stdio_init.part.0+0x30>)
 8006a1c:	4c0b      	ldr	r4, [pc, #44]	; (8006a4c <global_stdio_init.part.0+0x34>)
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <global_stdio_init.part.0+0x38>)
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	4620      	mov	r0, r4
 8006a24:	2200      	movs	r2, #0
 8006a26:	2104      	movs	r1, #4
 8006a28:	f7ff ffa6 	bl	8006978 <std>
 8006a2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a30:	2201      	movs	r2, #1
 8006a32:	2109      	movs	r1, #9
 8006a34:	f7ff ffa0 	bl	8006978 <std>
 8006a38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a42:	2112      	movs	r1, #18
 8006a44:	f7ff bf98 	b.w	8006978 <std>
 8006a48:	20014670 	.word	0x20014670
 8006a4c:	20014538 	.word	0x20014538
 8006a50:	080069c1 	.word	0x080069c1

08006a54 <__sfp_lock_acquire>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__sfp_lock_acquire+0x8>)
 8006a56:	f000 b9e3 	b.w	8006e20 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20014679 	.word	0x20014679

08006a60 <__sfp_lock_release>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sfp_lock_release+0x8>)
 8006a62:	f000 b9de 	b.w	8006e22 <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	20014679 	.word	0x20014679

08006a6c <__sinit>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	f7ff fff0 	bl	8006a54 <__sfp_lock_acquire>
 8006a74:	6a23      	ldr	r3, [r4, #32]
 8006a76:	b11b      	cbz	r3, 8006a80 <__sinit+0x14>
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f7ff bff0 	b.w	8006a60 <__sfp_lock_release>
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <__sinit+0x28>)
 8006a82:	6223      	str	r3, [r4, #32]
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <__sinit+0x2c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f5      	bne.n	8006a78 <__sinit+0xc>
 8006a8c:	f7ff ffc4 	bl	8006a18 <global_stdio_init.part.0>
 8006a90:	e7f2      	b.n	8006a78 <__sinit+0xc>
 8006a92:	bf00      	nop
 8006a94:	080069d9 	.word	0x080069d9
 8006a98:	20014670 	.word	0x20014670

08006a9c <_fwalk_sglue>:
 8006a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	4688      	mov	r8, r1
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aac:	f1b9 0901 	subs.w	r9, r9, #1
 8006ab0:	d505      	bpl.n	8006abe <_fwalk_sglue+0x22>
 8006ab2:	6824      	ldr	r4, [r4, #0]
 8006ab4:	2c00      	cmp	r4, #0
 8006ab6:	d1f7      	bne.n	8006aa8 <_fwalk_sglue+0xc>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d907      	bls.n	8006ad4 <_fwalk_sglue+0x38>
 8006ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	d003      	beq.n	8006ad4 <_fwalk_sglue+0x38>
 8006acc:	4629      	mov	r1, r5
 8006ace:	4638      	mov	r0, r7
 8006ad0:	47c0      	blx	r8
 8006ad2:	4306      	orrs	r6, r0
 8006ad4:	3568      	adds	r5, #104	; 0x68
 8006ad6:	e7e9      	b.n	8006aac <_fwalk_sglue+0x10>

08006ad8 <_puts_r>:
 8006ad8:	6a03      	ldr	r3, [r0, #32]
 8006ada:	b570      	push	{r4, r5, r6, lr}
 8006adc:	6884      	ldr	r4, [r0, #8]
 8006ade:	4605      	mov	r5, r0
 8006ae0:	460e      	mov	r6, r1
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <_puts_r+0x10>
 8006ae4:	f7ff ffc2 	bl	8006a6c <__sinit>
 8006ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aea:	07db      	lsls	r3, r3, #31
 8006aec:	d405      	bmi.n	8006afa <_puts_r+0x22>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	0598      	lsls	r0, r3, #22
 8006af2:	d402      	bmi.n	8006afa <_puts_r+0x22>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f000 f993 	bl	8006e20 <__retarget_lock_acquire_recursive>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	0719      	lsls	r1, r3, #28
 8006afe:	d513      	bpl.n	8006b28 <_puts_r+0x50>
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	b18b      	cbz	r3, 8006b28 <_puts_r+0x50>
 8006b04:	3e01      	subs	r6, #1
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	60a3      	str	r3, [r4, #8]
 8006b10:	b9e9      	cbnz	r1, 8006b4e <_puts_r+0x76>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	da2e      	bge.n	8006b74 <_puts_r+0x9c>
 8006b16:	4622      	mov	r2, r4
 8006b18:	210a      	movs	r1, #10
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 f87b 	bl	8006c16 <__swbuf_r>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d007      	beq.n	8006b34 <_puts_r+0x5c>
 8006b24:	250a      	movs	r5, #10
 8006b26:	e007      	b.n	8006b38 <_puts_r+0x60>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 f8b0 	bl	8006c90 <__swsetup_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d0e7      	beq.n	8006b04 <_puts_r+0x2c>
 8006b34:	f04f 35ff 	mov.w	r5, #4294967295
 8006b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b3a:	07da      	lsls	r2, r3, #31
 8006b3c:	d405      	bmi.n	8006b4a <_puts_r+0x72>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	059b      	lsls	r3, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_puts_r+0x72>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f000 f96c 	bl	8006e22 <__retarget_lock_release_recursive>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da04      	bge.n	8006b5c <_puts_r+0x84>
 8006b52:	69a2      	ldr	r2, [r4, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dc06      	bgt.n	8006b66 <_puts_r+0x8e>
 8006b58:	290a      	cmp	r1, #10
 8006b5a:	d004      	beq.n	8006b66 <_puts_r+0x8e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	7019      	strb	r1, [r3, #0]
 8006b64:	e7cf      	b.n	8006b06 <_puts_r+0x2e>
 8006b66:	4622      	mov	r2, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 f854 	bl	8006c16 <__swbuf_r>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d1c9      	bne.n	8006b06 <_puts_r+0x2e>
 8006b72:	e7df      	b.n	8006b34 <_puts_r+0x5c>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	250a      	movs	r5, #10
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	701d      	strb	r5, [r3, #0]
 8006b7e:	e7db      	b.n	8006b38 <_puts_r+0x60>

08006b80 <puts>:
 8006b80:	4b02      	ldr	r3, [pc, #8]	; (8006b8c <puts+0xc>)
 8006b82:	4601      	mov	r1, r0
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	f7ff bfa7 	b.w	8006ad8 <_puts_r>
 8006b8a:	bf00      	nop
 8006b8c:	2000006c 	.word	0x2000006c

08006b90 <__sread>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	460c      	mov	r4, r1
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	f000 f90c 	bl	8006db4 <_read_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	bfab      	itete	ge
 8006ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ba4:	181b      	addge	r3, r3, r0
 8006ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006baa:	bfac      	ite	ge
 8006bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bae:	81a3      	strhlt	r3, [r4, #12]
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <__swrite>:
 8006bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	05db      	lsls	r3, r3, #23
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	d505      	bpl.n	8006bd0 <__swrite+0x1e>
 8006bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc8:	2302      	movs	r3, #2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f000 f8e0 	bl	8006d90 <_lseek_r>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	463b      	mov	r3, r7
 8006be0:	4628      	mov	r0, r5
 8006be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be6:	f7ff beb5 	b.w	8006954 <_write_r>

08006bea <__sseek>:
 8006bea:	b510      	push	{r4, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf2:	f000 f8cd 	bl	8006d90 <_lseek_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	bf15      	itete	ne
 8006bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c06:	81a3      	strheq	r3, [r4, #12]
 8006c08:	bf18      	it	ne
 8006c0a:	81a3      	strhne	r3, [r4, #12]
 8006c0c:	bd10      	pop	{r4, pc}

08006c0e <__sclose>:
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 b8ad 	b.w	8006d70 <_close_r>

08006c16 <__swbuf_r>:
 8006c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c18:	460e      	mov	r6, r1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	b118      	cbz	r0, 8006c28 <__swbuf_r+0x12>
 8006c20:	6a03      	ldr	r3, [r0, #32]
 8006c22:	b90b      	cbnz	r3, 8006c28 <__swbuf_r+0x12>
 8006c24:	f7ff ff22 	bl	8006a6c <__sinit>
 8006c28:	69a3      	ldr	r3, [r4, #24]
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	071a      	lsls	r2, r3, #28
 8006c30:	d525      	bpl.n	8006c7e <__swbuf_r+0x68>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	b31b      	cbz	r3, 8006c7e <__swbuf_r+0x68>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	6922      	ldr	r2, [r4, #16]
 8006c3a:	1a98      	subs	r0, r3, r2
 8006c3c:	6963      	ldr	r3, [r4, #20]
 8006c3e:	b2f6      	uxtb	r6, r6
 8006c40:	4283      	cmp	r3, r0
 8006c42:	4637      	mov	r7, r6
 8006c44:	dc04      	bgt.n	8006c50 <__swbuf_r+0x3a>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fa77 	bl	800713c <_fflush_r>
 8006c4e:	b9e0      	cbnz	r0, 8006c8a <__swbuf_r+0x74>
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	6022      	str	r2, [r4, #0]
 8006c5c:	701e      	strb	r6, [r3, #0]
 8006c5e:	6962      	ldr	r2, [r4, #20]
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d004      	beq.n	8006c70 <__swbuf_r+0x5a>
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	07db      	lsls	r3, r3, #31
 8006c6a:	d506      	bpl.n	8006c7a <__swbuf_r+0x64>
 8006c6c:	2e0a      	cmp	r6, #10
 8006c6e:	d104      	bne.n	8006c7a <__swbuf_r+0x64>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 fa62 	bl	800713c <_fflush_r>
 8006c78:	b938      	cbnz	r0, 8006c8a <__swbuf_r+0x74>
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f805 	bl	8006c90 <__swsetup_r>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0d5      	beq.n	8006c36 <__swbuf_r+0x20>
 8006c8a:	f04f 37ff 	mov.w	r7, #4294967295
 8006c8e:	e7f4      	b.n	8006c7a <__swbuf_r+0x64>

08006c90 <__swsetup_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <__swsetup_r+0xac>)
 8006c94:	4605      	mov	r5, r0
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	460c      	mov	r4, r1
 8006c9a:	b118      	cbz	r0, 8006ca4 <__swsetup_r+0x14>
 8006c9c:	6a03      	ldr	r3, [r0, #32]
 8006c9e:	b90b      	cbnz	r3, 8006ca4 <__swsetup_r+0x14>
 8006ca0:	f7ff fee4 	bl	8006a6c <__sinit>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006caa:	0718      	lsls	r0, r3, #28
 8006cac:	d422      	bmi.n	8006cf4 <__swsetup_r+0x64>
 8006cae:	06d9      	lsls	r1, r3, #27
 8006cb0:	d407      	bmi.n	8006cc2 <__swsetup_r+0x32>
 8006cb2:	2309      	movs	r3, #9
 8006cb4:	602b      	str	r3, [r5, #0]
 8006cb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e034      	b.n	8006d2c <__swsetup_r+0x9c>
 8006cc2:	0758      	lsls	r0, r3, #29
 8006cc4:	d512      	bpl.n	8006cec <__swsetup_r+0x5c>
 8006cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cc8:	b141      	cbz	r1, 8006cdc <__swsetup_r+0x4c>
 8006cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d002      	beq.n	8006cd8 <__swsetup_r+0x48>
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f8b4 	bl	8006e40 <_free_r>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6363      	str	r3, [r4, #52]	; 0x34
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f043 0308 	orr.w	r3, r3, #8
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	b94b      	cbnz	r3, 8006d0c <__swsetup_r+0x7c>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d02:	d003      	beq.n	8006d0c <__swsetup_r+0x7c>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 fa66 	bl	80071d8 <__smakebuf_r>
 8006d0c:	89a0      	ldrh	r0, [r4, #12]
 8006d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d12:	f010 0301 	ands.w	r3, r0, #1
 8006d16:	d00a      	beq.n	8006d2e <__swsetup_r+0x9e>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	6963      	ldr	r3, [r4, #20]
 8006d1e:	425b      	negs	r3, r3
 8006d20:	61a3      	str	r3, [r4, #24]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	b943      	cbnz	r3, 8006d38 <__swsetup_r+0xa8>
 8006d26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d2a:	d1c4      	bne.n	8006cb6 <__swsetup_r+0x26>
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	0781      	lsls	r1, r0, #30
 8006d30:	bf58      	it	pl
 8006d32:	6963      	ldrpl	r3, [r4, #20]
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	e7f4      	b.n	8006d22 <__swsetup_r+0x92>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e7f7      	b.n	8006d2c <__swsetup_r+0x9c>
 8006d3c:	2000006c 	.word	0x2000006c

08006d40 <memcmp>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	3901      	subs	r1, #1
 8006d44:	4402      	add	r2, r0
 8006d46:	4290      	cmp	r0, r2
 8006d48:	d101      	bne.n	8006d4e <memcmp+0xe>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e005      	b.n	8006d5a <memcmp+0x1a>
 8006d4e:	7803      	ldrb	r3, [r0, #0]
 8006d50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d001      	beq.n	8006d5c <memcmp+0x1c>
 8006d58:	1b18      	subs	r0, r3, r4
 8006d5a:	bd10      	pop	{r4, pc}
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	e7f2      	b.n	8006d46 <memcmp+0x6>

08006d60 <memset>:
 8006d60:	4402      	add	r2, r0
 8006d62:	4603      	mov	r3, r0
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d100      	bne.n	8006d6a <memset+0xa>
 8006d68:	4770      	bx	lr
 8006d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6e:	e7f9      	b.n	8006d64 <memset+0x4>

08006d70 <_close_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d06      	ldr	r5, [pc, #24]	; (8006d8c <_close_r+0x1c>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7f9 fec1 	bl	8000b02 <_close>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_close_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_close_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20014674 	.word	0x20014674

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	; (8006db0 <_lseek_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7f9 fed6 	bl	8000b50 <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20014674 	.word	0x20014674

08006db4 <_read_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	; (8006dd4 <_read_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7f9 fe80 	bl	8000ac8 <_read>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_read_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_read_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20014674 	.word	0x20014674

08006dd8 <__libc_init_array>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4d0d      	ldr	r5, [pc, #52]	; (8006e10 <__libc_init_array+0x38>)
 8006ddc:	4c0d      	ldr	r4, [pc, #52]	; (8006e14 <__libc_init_array+0x3c>)
 8006dde:	1b64      	subs	r4, r4, r5
 8006de0:	10a4      	asrs	r4, r4, #2
 8006de2:	2600      	movs	r6, #0
 8006de4:	42a6      	cmp	r6, r4
 8006de6:	d109      	bne.n	8006dfc <__libc_init_array+0x24>
 8006de8:	4d0b      	ldr	r5, [pc, #44]	; (8006e18 <__libc_init_array+0x40>)
 8006dea:	4c0c      	ldr	r4, [pc, #48]	; (8006e1c <__libc_init_array+0x44>)
 8006dec:	f000 fa70 	bl	80072d0 <_init>
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	2600      	movs	r6, #0
 8006df6:	42a6      	cmp	r6, r4
 8006df8:	d105      	bne.n	8006e06 <__libc_init_array+0x2e>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e00:	4798      	blx	r3
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7ee      	b.n	8006de4 <__libc_init_array+0xc>
 8006e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0a:	4798      	blx	r3
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	e7f2      	b.n	8006df6 <__libc_init_array+0x1e>
 8006e10:	08007448 	.word	0x08007448
 8006e14:	08007448 	.word	0x08007448
 8006e18:	08007448 	.word	0x08007448
 8006e1c:	0800744c 	.word	0x0800744c

08006e20 <__retarget_lock_acquire_recursive>:
 8006e20:	4770      	bx	lr

08006e22 <__retarget_lock_release_recursive>:
 8006e22:	4770      	bx	lr

08006e24 <memcpy>:
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e2c:	d100      	bne.n	8006e30 <memcpy+0xc>
 8006e2e:	4770      	bx	lr
 8006e30:	b510      	push	{r4, lr}
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d1f9      	bne.n	8006e32 <memcpy+0xe>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <_free_r>:
 8006e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d044      	beq.n	8006ed0 <_free_r+0x90>
 8006e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e4a:	9001      	str	r0, [sp, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e52:	bfb8      	it	lt
 8006e54:	18e4      	addlt	r4, r4, r3
 8006e56:	f000 f8df 	bl	8007018 <__malloc_lock>
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ed4 <_free_r+0x94>)
 8006e5c:	9801      	ldr	r0, [sp, #4]
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	b933      	cbnz	r3, 8006e70 <_free_r+0x30>
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	6014      	str	r4, [r2, #0]
 8006e66:	b003      	add	sp, #12
 8006e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e6c:	f000 b8da 	b.w	8007024 <__malloc_unlock>
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d908      	bls.n	8006e86 <_free_r+0x46>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf01      	itttt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	1949      	addeq	r1, r1, r5
 8006e82:	6021      	streq	r1, [r4, #0]
 8006e84:	e7ed      	b.n	8006e62 <_free_r+0x22>
 8006e86:	461a      	mov	r2, r3
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	b10b      	cbz	r3, 8006e90 <_free_r+0x50>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d9fa      	bls.n	8006e86 <_free_r+0x46>
 8006e90:	6811      	ldr	r1, [r2, #0]
 8006e92:	1855      	adds	r5, r2, r1
 8006e94:	42a5      	cmp	r5, r4
 8006e96:	d10b      	bne.n	8006eb0 <_free_r+0x70>
 8006e98:	6824      	ldr	r4, [r4, #0]
 8006e9a:	4421      	add	r1, r4
 8006e9c:	1854      	adds	r4, r2, r1
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6011      	str	r1, [r2, #0]
 8006ea2:	d1e0      	bne.n	8006e66 <_free_r+0x26>
 8006ea4:	681c      	ldr	r4, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	6053      	str	r3, [r2, #4]
 8006eaa:	440c      	add	r4, r1
 8006eac:	6014      	str	r4, [r2, #0]
 8006eae:	e7da      	b.n	8006e66 <_free_r+0x26>
 8006eb0:	d902      	bls.n	8006eb8 <_free_r+0x78>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	6003      	str	r3, [r0, #0]
 8006eb6:	e7d6      	b.n	8006e66 <_free_r+0x26>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	1961      	adds	r1, r4, r5
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	bf04      	itt	eq
 8006ec0:	6819      	ldreq	r1, [r3, #0]
 8006ec2:	685b      	ldreq	r3, [r3, #4]
 8006ec4:	6063      	str	r3, [r4, #4]
 8006ec6:	bf04      	itt	eq
 8006ec8:	1949      	addeq	r1, r1, r5
 8006eca:	6021      	streq	r1, [r4, #0]
 8006ecc:	6054      	str	r4, [r2, #4]
 8006ece:	e7ca      	b.n	8006e66 <_free_r+0x26>
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd30      	pop	{r4, r5, pc}
 8006ed4:	2001467c 	.word	0x2001467c

08006ed8 <sbrk_aligned>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4e0e      	ldr	r6, [pc, #56]	; (8006f14 <sbrk_aligned+0x3c>)
 8006edc:	460c      	mov	r4, r1
 8006ede:	6831      	ldr	r1, [r6, #0]
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	b911      	cbnz	r1, 8006eea <sbrk_aligned+0x12>
 8006ee4:	f000 f9d6 	bl	8007294 <_sbrk_r>
 8006ee8:	6030      	str	r0, [r6, #0]
 8006eea:	4621      	mov	r1, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 f9d1 	bl	8007294 <_sbrk_r>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	d00a      	beq.n	8006f0c <sbrk_aligned+0x34>
 8006ef6:	1cc4      	adds	r4, r0, #3
 8006ef8:	f024 0403 	bic.w	r4, r4, #3
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d007      	beq.n	8006f10 <sbrk_aligned+0x38>
 8006f00:	1a21      	subs	r1, r4, r0
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f9c6 	bl	8007294 <_sbrk_r>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d101      	bne.n	8006f10 <sbrk_aligned+0x38>
 8006f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f10:	4620      	mov	r0, r4
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	20014680 	.word	0x20014680

08006f18 <_malloc_r>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	1ccd      	adds	r5, r1, #3
 8006f1e:	f025 0503 	bic.w	r5, r5, #3
 8006f22:	3508      	adds	r5, #8
 8006f24:	2d0c      	cmp	r5, #12
 8006f26:	bf38      	it	cc
 8006f28:	250c      	movcc	r5, #12
 8006f2a:	2d00      	cmp	r5, #0
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	db01      	blt.n	8006f34 <_malloc_r+0x1c>
 8006f30:	42a9      	cmp	r1, r5
 8006f32:	d905      	bls.n	8006f40 <_malloc_r+0x28>
 8006f34:	230c      	movs	r3, #12
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	2600      	movs	r6, #0
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007014 <_malloc_r+0xfc>
 8006f44:	f000 f868 	bl	8007018 <__malloc_lock>
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	461c      	mov	r4, r3
 8006f4e:	bb5c      	cbnz	r4, 8006fa8 <_malloc_r+0x90>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	f7ff ffc0 	bl	8006ed8 <sbrk_aligned>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	d155      	bne.n	800700a <_malloc_r+0xf2>
 8006f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f62:	4626      	mov	r6, r4
 8006f64:	2e00      	cmp	r6, #0
 8006f66:	d145      	bne.n	8006ff4 <_malloc_r+0xdc>
 8006f68:	2c00      	cmp	r4, #0
 8006f6a:	d048      	beq.n	8006ffe <_malloc_r+0xe6>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4638      	mov	r0, r7
 8006f72:	eb04 0903 	add.w	r9, r4, r3
 8006f76:	f000 f98d 	bl	8007294 <_sbrk_r>
 8006f7a:	4581      	cmp	r9, r0
 8006f7c:	d13f      	bne.n	8006ffe <_malloc_r+0xe6>
 8006f7e:	6821      	ldr	r1, [r4, #0]
 8006f80:	1a6d      	subs	r5, r5, r1
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ffa7 	bl	8006ed8 <sbrk_aligned>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d037      	beq.n	8006ffe <_malloc_r+0xe6>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	442b      	add	r3, r5
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	f8d8 3000 	ldr.w	r3, [r8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d038      	beq.n	800700e <_malloc_r+0xf6>
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	42a2      	cmp	r2, r4
 8006fa0:	d12b      	bne.n	8006ffa <_malloc_r+0xe2>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	e00f      	b.n	8006fc8 <_malloc_r+0xb0>
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	1b52      	subs	r2, r2, r5
 8006fac:	d41f      	bmi.n	8006fee <_malloc_r+0xd6>
 8006fae:	2a0b      	cmp	r2, #11
 8006fb0:	d917      	bls.n	8006fe2 <_malloc_r+0xca>
 8006fb2:	1961      	adds	r1, r4, r5
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	6025      	str	r5, [r4, #0]
 8006fb8:	bf18      	it	ne
 8006fba:	6059      	strne	r1, [r3, #4]
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	bf08      	it	eq
 8006fc0:	f8c8 1000 	streq.w	r1, [r8]
 8006fc4:	5162      	str	r2, [r4, r5]
 8006fc6:	604b      	str	r3, [r1, #4]
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f104 060b 	add.w	r6, r4, #11
 8006fce:	f000 f829 	bl	8007024 <__malloc_unlock>
 8006fd2:	f026 0607 	bic.w	r6, r6, #7
 8006fd6:	1d23      	adds	r3, r4, #4
 8006fd8:	1af2      	subs	r2, r6, r3
 8006fda:	d0ae      	beq.n	8006f3a <_malloc_r+0x22>
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7ab      	b.n	8006f3a <_malloc_r+0x22>
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	6862      	ldr	r2, [r4, #4]
 8006fe6:	d1dd      	bne.n	8006fa4 <_malloc_r+0x8c>
 8006fe8:	f8c8 2000 	str.w	r2, [r8]
 8006fec:	e7ec      	b.n	8006fc8 <_malloc_r+0xb0>
 8006fee:	4623      	mov	r3, r4
 8006ff0:	6864      	ldr	r4, [r4, #4]
 8006ff2:	e7ac      	b.n	8006f4e <_malloc_r+0x36>
 8006ff4:	4634      	mov	r4, r6
 8006ff6:	6876      	ldr	r6, [r6, #4]
 8006ff8:	e7b4      	b.n	8006f64 <_malloc_r+0x4c>
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	e7cc      	b.n	8006f98 <_malloc_r+0x80>
 8006ffe:	230c      	movs	r3, #12
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	4638      	mov	r0, r7
 8007004:	f000 f80e 	bl	8007024 <__malloc_unlock>
 8007008:	e797      	b.n	8006f3a <_malloc_r+0x22>
 800700a:	6025      	str	r5, [r4, #0]
 800700c:	e7dc      	b.n	8006fc8 <_malloc_r+0xb0>
 800700e:	605b      	str	r3, [r3, #4]
 8007010:	deff      	udf	#255	; 0xff
 8007012:	bf00      	nop
 8007014:	2001467c 	.word	0x2001467c

08007018 <__malloc_lock>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__malloc_lock+0x8>)
 800701a:	f7ff bf01 	b.w	8006e20 <__retarget_lock_acquire_recursive>
 800701e:	bf00      	nop
 8007020:	20014678 	.word	0x20014678

08007024 <__malloc_unlock>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__malloc_unlock+0x8>)
 8007026:	f7ff befc 	b.w	8006e22 <__retarget_lock_release_recursive>
 800702a:	bf00      	nop
 800702c:	20014678 	.word	0x20014678

08007030 <__sflush_r>:
 8007030:	898a      	ldrh	r2, [r1, #12]
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	0710      	lsls	r0, r2, #28
 800703a:	460c      	mov	r4, r1
 800703c:	d458      	bmi.n	80070f0 <__sflush_r+0xc0>
 800703e:	684b      	ldr	r3, [r1, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc05      	bgt.n	8007050 <__sflush_r+0x20>
 8007044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	dc02      	bgt.n	8007050 <__sflush_r+0x20>
 800704a:	2000      	movs	r0, #0
 800704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007052:	2e00      	cmp	r6, #0
 8007054:	d0f9      	beq.n	800704a <__sflush_r+0x1a>
 8007056:	2300      	movs	r3, #0
 8007058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800705c:	682f      	ldr	r7, [r5, #0]
 800705e:	6a21      	ldr	r1, [r4, #32]
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	d032      	beq.n	80070ca <__sflush_r+0x9a>
 8007064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	075a      	lsls	r2, r3, #29
 800706a:	d505      	bpl.n	8007078 <__sflush_r+0x48>
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007072:	b10b      	cbz	r3, 8007078 <__sflush_r+0x48>
 8007074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007076:	1ac0      	subs	r0, r0, r3
 8007078:	2300      	movs	r3, #0
 800707a:	4602      	mov	r2, r0
 800707c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800707e:	6a21      	ldr	r1, [r4, #32]
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	d106      	bne.n	8007098 <__sflush_r+0x68>
 800708a:	6829      	ldr	r1, [r5, #0]
 800708c:	291d      	cmp	r1, #29
 800708e:	d82b      	bhi.n	80070e8 <__sflush_r+0xb8>
 8007090:	4a29      	ldr	r2, [pc, #164]	; (8007138 <__sflush_r+0x108>)
 8007092:	410a      	asrs	r2, r1
 8007094:	07d6      	lsls	r6, r2, #31
 8007096:	d427      	bmi.n	80070e8 <__sflush_r+0xb8>
 8007098:	2200      	movs	r2, #0
 800709a:	6062      	str	r2, [r4, #4]
 800709c:	04d9      	lsls	r1, r3, #19
 800709e:	6922      	ldr	r2, [r4, #16]
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	d504      	bpl.n	80070ae <__sflush_r+0x7e>
 80070a4:	1c42      	adds	r2, r0, #1
 80070a6:	d101      	bne.n	80070ac <__sflush_r+0x7c>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b903      	cbnz	r3, 80070ae <__sflush_r+0x7e>
 80070ac:	6560      	str	r0, [r4, #84]	; 0x54
 80070ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b0:	602f      	str	r7, [r5, #0]
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d0c9      	beq.n	800704a <__sflush_r+0x1a>
 80070b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d002      	beq.n	80070c4 <__sflush_r+0x94>
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff febe 	bl	8006e40 <_free_r>
 80070c4:	2000      	movs	r0, #0
 80070c6:	6360      	str	r0, [r4, #52]	; 0x34
 80070c8:	e7c0      	b.n	800704c <__sflush_r+0x1c>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	1c41      	adds	r1, r0, #1
 80070d2:	d1c8      	bne.n	8007066 <__sflush_r+0x36>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0c5      	beq.n	8007066 <__sflush_r+0x36>
 80070da:	2b1d      	cmp	r3, #29
 80070dc:	d001      	beq.n	80070e2 <__sflush_r+0xb2>
 80070de:	2b16      	cmp	r3, #22
 80070e0:	d101      	bne.n	80070e6 <__sflush_r+0xb6>
 80070e2:	602f      	str	r7, [r5, #0]
 80070e4:	e7b1      	b.n	800704a <__sflush_r+0x1a>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	e7ad      	b.n	800704c <__sflush_r+0x1c>
 80070f0:	690f      	ldr	r7, [r1, #16]
 80070f2:	2f00      	cmp	r7, #0
 80070f4:	d0a9      	beq.n	800704a <__sflush_r+0x1a>
 80070f6:	0793      	lsls	r3, r2, #30
 80070f8:	680e      	ldr	r6, [r1, #0]
 80070fa:	bf08      	it	eq
 80070fc:	694b      	ldreq	r3, [r1, #20]
 80070fe:	600f      	str	r7, [r1, #0]
 8007100:	bf18      	it	ne
 8007102:	2300      	movne	r3, #0
 8007104:	eba6 0807 	sub.w	r8, r6, r7
 8007108:	608b      	str	r3, [r1, #8]
 800710a:	f1b8 0f00 	cmp.w	r8, #0
 800710e:	dd9c      	ble.n	800704a <__sflush_r+0x1a>
 8007110:	6a21      	ldr	r1, [r4, #32]
 8007112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007114:	4643      	mov	r3, r8
 8007116:	463a      	mov	r2, r7
 8007118:	4628      	mov	r0, r5
 800711a:	47b0      	blx	r6
 800711c:	2800      	cmp	r0, #0
 800711e:	dc06      	bgt.n	800712e <__sflush_r+0xfe>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	e78e      	b.n	800704c <__sflush_r+0x1c>
 800712e:	4407      	add	r7, r0
 8007130:	eba8 0800 	sub.w	r8, r8, r0
 8007134:	e7e9      	b.n	800710a <__sflush_r+0xda>
 8007136:	bf00      	nop
 8007138:	dfbffffe 	.word	0xdfbffffe

0800713c <_fflush_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	690b      	ldr	r3, [r1, #16]
 8007140:	4605      	mov	r5, r0
 8007142:	460c      	mov	r4, r1
 8007144:	b913      	cbnz	r3, 800714c <_fflush_r+0x10>
 8007146:	2500      	movs	r5, #0
 8007148:	4628      	mov	r0, r5
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	b118      	cbz	r0, 8007156 <_fflush_r+0x1a>
 800714e:	6a03      	ldr	r3, [r0, #32]
 8007150:	b90b      	cbnz	r3, 8007156 <_fflush_r+0x1a>
 8007152:	f7ff fc8b 	bl	8006a6c <__sinit>
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f3      	beq.n	8007146 <_fflush_r+0xa>
 800715e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007160:	07d0      	lsls	r0, r2, #31
 8007162:	d404      	bmi.n	800716e <_fflush_r+0x32>
 8007164:	0599      	lsls	r1, r3, #22
 8007166:	d402      	bmi.n	800716e <_fflush_r+0x32>
 8007168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800716a:	f7ff fe59 	bl	8006e20 <__retarget_lock_acquire_recursive>
 800716e:	4628      	mov	r0, r5
 8007170:	4621      	mov	r1, r4
 8007172:	f7ff ff5d 	bl	8007030 <__sflush_r>
 8007176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007178:	07da      	lsls	r2, r3, #31
 800717a:	4605      	mov	r5, r0
 800717c:	d4e4      	bmi.n	8007148 <_fflush_r+0xc>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	059b      	lsls	r3, r3, #22
 8007182:	d4e1      	bmi.n	8007148 <_fflush_r+0xc>
 8007184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007186:	f7ff fe4c 	bl	8006e22 <__retarget_lock_release_recursive>
 800718a:	e7dd      	b.n	8007148 <_fflush_r+0xc>

0800718c <__swhatbuf_r>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	460c      	mov	r4, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	2900      	cmp	r1, #0
 8007196:	b096      	sub	sp, #88	; 0x58
 8007198:	4615      	mov	r5, r2
 800719a:	461e      	mov	r6, r3
 800719c:	da0d      	bge.n	80071ba <__swhatbuf_r+0x2e>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071a4:	f04f 0100 	mov.w	r1, #0
 80071a8:	bf0c      	ite	eq
 80071aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071ae:	2340      	movne	r3, #64	; 0x40
 80071b0:	2000      	movs	r0, #0
 80071b2:	6031      	str	r1, [r6, #0]
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	b016      	add	sp, #88	; 0x58
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
 80071ba:	466a      	mov	r2, sp
 80071bc:	f000 f848 	bl	8007250 <_fstat_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	dbec      	blt.n	800719e <__swhatbuf_r+0x12>
 80071c4:	9901      	ldr	r1, [sp, #4]
 80071c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071ce:	4259      	negs	r1, r3
 80071d0:	4159      	adcs	r1, r3
 80071d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d6:	e7eb      	b.n	80071b0 <__swhatbuf_r+0x24>

080071d8 <__smakebuf_r>:
 80071d8:	898b      	ldrh	r3, [r1, #12]
 80071da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071dc:	079d      	lsls	r5, r3, #30
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	d507      	bpl.n	80071f4 <__smakebuf_r+0x1c>
 80071e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	2301      	movs	r3, #1
 80071ee:	6163      	str	r3, [r4, #20]
 80071f0:	b002      	add	sp, #8
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	ab01      	add	r3, sp, #4
 80071f6:	466a      	mov	r2, sp
 80071f8:	f7ff ffc8 	bl	800718c <__swhatbuf_r>
 80071fc:	9900      	ldr	r1, [sp, #0]
 80071fe:	4605      	mov	r5, r0
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff fe89 	bl	8006f18 <_malloc_r>
 8007206:	b948      	cbnz	r0, 800721c <__smakebuf_r+0x44>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d4ef      	bmi.n	80071f0 <__smakebuf_r+0x18>
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	e7e3      	b.n	80071e4 <__smakebuf_r+0xc>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	6020      	str	r0, [r4, #0]
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	6163      	str	r3, [r4, #20]
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	6120      	str	r0, [r4, #16]
 800722e:	b15b      	cbz	r3, 8007248 <__smakebuf_r+0x70>
 8007230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007234:	4630      	mov	r0, r6
 8007236:	f000 f81d 	bl	8007274 <_isatty_r>
 800723a:	b128      	cbz	r0, 8007248 <__smakebuf_r+0x70>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	f043 0301 	orr.w	r3, r3, #1
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	431d      	orrs	r5, r3
 800724c:	81a5      	strh	r5, [r4, #12]
 800724e:	e7cf      	b.n	80071f0 <__smakebuf_r+0x18>

08007250 <_fstat_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	; (8007270 <_fstat_r+0x20>)
 8007254:	2300      	movs	r3, #0
 8007256:	4604      	mov	r4, r0
 8007258:	4608      	mov	r0, r1
 800725a:	4611      	mov	r1, r2
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	f7f9 fc5c 	bl	8000b1a <_fstat>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d102      	bne.n	800726c <_fstat_r+0x1c>
 8007266:	682b      	ldr	r3, [r5, #0]
 8007268:	b103      	cbz	r3, 800726c <_fstat_r+0x1c>
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	bf00      	nop
 8007270:	20014674 	.word	0x20014674

08007274 <_isatty_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_isatty_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7f9 fc5b 	bl	8000b3a <_isatty>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_isatty_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_isatty_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20014674 	.word	0x20014674

08007294 <_sbrk_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_sbrk_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f000 f808 	bl	80072b4 <_sbrk>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_sbrk_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_sbrk_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	20014674 	.word	0x20014674

080072b4 <_sbrk>:
 80072b4:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <_sbrk+0x14>)
 80072b6:	6811      	ldr	r1, [r2, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	b909      	cbnz	r1, 80072c0 <_sbrk+0xc>
 80072bc:	4903      	ldr	r1, [pc, #12]	; (80072cc <_sbrk+0x18>)
 80072be:	6011      	str	r1, [r2, #0]
 80072c0:	6810      	ldr	r0, [r2, #0]
 80072c2:	4403      	add	r3, r0
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4770      	bx	lr
 80072c8:	20014684 	.word	0x20014684
 80072cc:	20014688 	.word	0x20014688

080072d0 <_init>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr

080072dc <_fini>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr
